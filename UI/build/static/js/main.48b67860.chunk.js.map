{"version":3,"sources":["pages/SwitchView/components/XarrowWrapper.tsx","pages/SwitchView/components/aclsFields.tsx","pages/SwitchView/modals/FlowDetailsModal.tsx","pages/SwitchView/components/ConnectPointsWrapper.tsx","pages/SwitchView/components/Port.tsx","pages/SwitchView/components/PortsBar.tsx","pages/SwitchView/components/TestComponent.jsx","pages/SwitchView/modals/SwitchDetailsModal.tsx","pages/SwitchView/components/ToolboxMenu.tsx","pages/SwitchView/components/TopBar.tsx","pages/SwitchView/components/Box.tsx","pages/SwitchView/components/BoxesContainer.tsx","pages/SwitchView/SwitchView.tsx","pages/switches/SwitchesPage.tsx","App.tsx","index.jsx"],"names":["React","memo","line","c","useContext","CanvasContext","useState","color","state","setState","defProps","consoleWarning","passProps","onMouseEnter","onMouseLeave","onClick","e","stopPropagation","setSelected","id","start","end","shape","setActionState","cursor","startAnchor","includes","endAnchor","selected","matchFields","actionsFields","SectionMenu","sectionName","fields","details","setDetails","useEffect","handleDelField","key","newDetails","handleSaveFieldChange","value","Object","assign","className","handleAddField","secName","keys","map","name","InputField","onMouseDown","TextField","type","placeholder","onChange","target","style","fontSize","titleAccess","PopUpMenu","filterField","setFilterField","filter","f","trigger","position","on","closeOnDocumentClick","mouseLeaveDelay","mouseEnterDelay","contentStyle","border","width","transition","arrow","field","BoxDetailsModal","flow","match","matchDetails","setMatchDetails","actions","actionsDetails","setActionsDetails","modDetails","priority","handleSaveChanges","flowDetails","updatedFlow","isSynced","box","flowDetailsModalOpen","updateFlowOnServer","enableUserSelectHack","defaultPosition","x","y","display","alignSelf","isEqual","updateBoxOnUi","addFlowToServer","InputBase","defaultValue","inputProps","textAlign","updateFlowName","connectPointStyle","height","borderRadius","background","connectPointOffset","left","top","transform","right","bottom","ConnectPoint","element","handler","elemPos","ref1","useRef","setPosition","beingDragged","setBeingDragged","Fragment","zIndex","draggable","onDragStart","handleBoxClick","dataTransfer","setData","onDrag","clientX","clientY","opacity","ref","onDragEnd","handleSelect","advanced","divContainer","ConnectPointsWrapper","handlers","port","portPolarity","lines","wasDragged","setWasDragged","chooseBoxBackground","Tooltip","interactive","enterDelay","title","detail","i","marginBottom","onDragOver","preventDefault","onDrop","getData","addLine","startBoxId","endBoxId","hw_addr","slice","port_no","ports","props","FlowDetails","flowEntry","visible","undefined","k","detailKey","toggleFlowVisibility","flex","matchKey","JSON","stringify","delFlow","SwitchDetailsModal","setSwitchDetailsWindow","flowEntries","ToolboxMenu","boxShapes","shapeName","modBox","portBox","portBoxOut","allowedActions","actionState","action","removeSelectedLine","openModsWindowOfSelected","toggleFlowVisibilityOfSelected","removeSelectedBox","handleEditAction","returnTopBarAppearance","boxes","handleDrag","data","newBoxes","findIndex","b","lastX","lastY","current","getBoundingClientRect","bounds","onStart","onStop","grid","constants","draggingGrid","console","log","BoxesContainer","handleDropBox","createContext","convertNumbersInObj2strings","obj","newObj","String","convertActionsFromUI2ServerSet","ac","Number","convertActionsFromServerGet2UI","split","reduce","acu","cu","SwitchView","dpid","useParams","switches","switchSelf","setSwitchSelf","p","setPorts","dataFetched","setDataFetched","switchDetailsWindow","fetchFlowsFromServer","fetch","proxyAddress","then","res","status","alert","json","result","boxesConSize","document","getElementById","Math","random","useCallback","updateFlowOnUi","find","setLines","getBoxes","mySwitchSelf","values","updatedBox","newSwitchSelf","newName","newFlow","checkExistence","addBox","l","length","prompt","concat","addLineToSelectedBox","inputFlow","outputFlow","replace","updateFlow","removeLine","lineId","delFlowFromUI","boxId","forEach","newSw","_","delFlowFromServer","callback","parsedActions","reqBody","requestOptions","method","headers","body","response","window","confirm","checkFlowExistence","flowMatch","isNaN","convertNumericStringsInObj2numbers","flowExist","serverFlowDetails","getFlowDetailsFromServer","canvasProps","useMemo","Provider","PortsBar","in_port","OUTPUT","FlowDetailsModal","size","loading","SwitchesPage","to","toString","App","setSwitches","connectFailed","setConnectFailed","switchesDpids","promises","error","Promise","all","parsed_switches","Container","maxWidth","exact","path","marginTop","rootElement","render"],"mappings":"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","file":"static/js/main.48b67860.chunk.js","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport Xarrow, { xarrowPropsType } from \"react-xarrows\";\nimport { CanvasContext, lineType, selectedType } from \"../SwitchView\";\n\n//{props: {line, setSelected, selected}}\n\ntype Optional<T> = { [P in keyof T]?: T[P] };\ntype Required<T> = { [K in keyof T]?: T[K] };\n\nexport type XarrowWrapperType = {\n  id: { start: string; end: string };\n  shape?: \"arrow\";\n};\n\nconst XarrowWrapper = ({ line }: { line: lineType }) => {\n  const c = useContext(CanvasContext);\n\n  const [state, setState] = useState({ color: line.color });\n  // console.log(props);\n  // console.log(\"Xarrow renderd\");\n\n  const defProps: Optional<xarrowPropsType> = {\n    consoleWarning: false,\n    passProps: {\n      onMouseEnter: () => setState({ color: \"IndianRed\" }),\n      onMouseLeave: () => setState({ color: line.color }),\n      onClick: (e) => {\n        e.stopPropagation(); //so only the click event on the arrow will fire on not on the conainer itself\n        c.setSelected({\n          id: { start: line.start as string, end: line.end as string },\n          shape: \"arrow\",\n        });\n        c.setActionState(\"Normal\");\n      },\n      cursor: \"pointer\",\n    },\n  };\n  let color = state.color;\n  let startAnchor = (line.start as string).includes(\":<input>\") ? (\"right\" as const) : (\"auto\" as const);\n  let endAnchor = (line.end as string).includes(\":<output>\") ? (\"left\" as const) : (\"auto\" as const);\n  if (\n    c.selected &&\n    c.selected.shape === \"arrow\" &&\n    c.selected.id.start === line.start &&\n    c.selected.id.end === line.end\n  ) {\n    color = \"red\";\n  }\n  return <Xarrow startAnchor={startAnchor} endAnchor={endAnchor} {...{ ...defProps, ...line, ...state, color }} />;\n};\n\nexport default React.memo(XarrowWrapper, () => false);\n","// export const matchFields = [\n//   [\"in_port\", \"Integer 32bit\", \"Switch input port\"],\n//   [\"in_phy_port\", \"Integer 32bit\", \"Switch physical input port\"],\n//   [\"metadata\", \"Integer 64bit\", \"Metadata passed between tables\"],\n//   [\"eth_dst\", \"MAC address\", \"Ethernet destination address\"],\n//   [\"eth_src\", \"MAC address\", \"Ethernet source address\"],\n//   [\"eth_type\", \"Integer 16bit\", \"Ethernet frame type\"],\n//   [\"vlan_vid\", \"Integer 16bit\", \"VLAN id\"],\n//   [\"vlan_pcp\", \"Integer 8bit\", \"VLAN priority\"],\n//   [\"ip_dscp\", \"Integer 8bit\", \"IP DSCP (6 bits in ToS field)\"],\n//   [\"ip_ecn\", \"Integer 8bit\", \"IP ECN (2 bits in ToS field)\"],\n//   [\"ip_proto\", \"Integer 8bit\", \"IP protocol\"],\n//   [\"ipv4_src\", \"IPv4 address\", \"IPv4 source address\"],\n//   [\"ipv4_dst\", \"IPv4 address\", \"IPv4 destination address\"],\n//   [\"tcp_src\", \"Integer 16bit\", \"TCP source port\"],\n//   [\"tcp_dst\", \"Integer 16bit\", \"TCP destination port\"],\n//   [\"udp_src\", \"Integer 16bit\", \"UDP source port\"],\n//   [\"udp_dst\", \"Integer 16bit\", \"UDP destination port\"],\n//   [\"sctp_src\", \"Integer 16bit\", \"SCTP source port\"],\n//   [\"sctp_dst\", \"Integer 16bit\", \"SCTP destination port\"],\n//   [\"icmpv4_type\", \"Integer 8bit\", \"ICMP type\"],\n//   [\"icmpv4_code\", \"Integer 8bit\", \"ICMP code\"],\n//   [\"arp_op\", \"Integer 16bit\", \"ARP opcode\"],\n//   [\"arp_spa\", \"IPv4 address\", \"ARP source IPv4 address\"],\n//   [\"arp_tpa\", \"IPv4 address\", \"ARP target IPv4 address\"],\n//   [\"arp_sha\", \"MAC address\", \"ARP source hardware address\"],\n//   [\"arp_tha\", \"MAC address\", \"ARP target hardware address\"],\n//   [\"ipv6_src\", \"IPv6 address\", \"IPv6 source address\"],\n//   [\"ipv6_dst\", \"IPv6 address\", \"IPv6 destination address\"],\n//   [\"ipv6_flabel\", \"Integer 32bit\", \"IPv6 Flow Label\"],\n//   [\"icmpv6_type\", \"Integer 8bit\", \"ICMPv6 type\"],\n//   [\"icmpv6_code\", \"Integer 8bit\", \"ICMPv6 code\"],\n//   [\"ipv6_nd_target\", \"IPv6 address\", \"Target address for ND\"],\n//   [\"ipv6_nd_sll\", \"MAC address\", \"Source link-layer for ND\"],\n//   [\"ipv6_nd_tll\", \"MAC address\", \"Target link-layer for ND\"],\n//   [\"mpls_label\", \"Integer 32bit\", \"MPLS label\"],\n//   [\"mpls_tc\", \"Integer 8bit\", \"MPLS TC\"],\n//   [\"mpls_bos\", \"Integer 8bit\", \"MPLS BoS bit\"],\n//   [\"pbb_isid\", \"Integer 24bit\", \"PBB I-SID\"],\n//   [\"tunnel_id\", \"Integer 64bit\", \"Logical Port Metadata\"],\n//   [\"ipv6_exthdr\", \"Integer 16bit\", \"IPv6 Extension Header pseudo-field\"],\n//   [\"pbb_uca\", \"Integer 8bit\", \"PBB UCA header field (EXT-256 Old version of ONF Extension)\"],\n//   [\"tcp_flags\", \"Integer 16bit\", \"TCP flags (EXT-109 ONF Extension)\"],\n//   [\"actset_output\", \"Integer 32bit\", \"Output port from action set metadata (EXT-233 ONF Extension)\"],\n\nimport { BoxType } from \"./Box\";\n\n// ];\nexport const matchFields = [\n  [\"in_port\", \"Switch input port (int)\", '{\"in_port\": 7}'],\n  [\"in_phy_port\", \"Switch physical input port (int)\", '{\"in_phy_port\": 5, \"in_port\": 3}'],\n  [\n    \"metadata\",\n    \"Metadata passed between tables (int or string)\",\n    '{\"metadata\": 12345} or {\"metadata\": \"0x1212/0xffff\"}',\n  ],\n  [\"eth_src\", \"Ethernet source address (string)\", '{\"eth_src\": \"aa:bb:cc:11:22:33\"}'],\n  [\"dl_src\", \"Ethernet source address (string)\", '{\"eth_src\": \"aa:bb:cc:11:22:33\"}'],\n  [\"eth_dst\", \"Ethernet destination address (string)\", '{\"eth_dst\": \"aa:bb:cc:11:22:33/00:00:00:00:ff:ff\"}'],\n  [\"dl_dst\", \"Ethernet destination address (string)\", '{\"eth_dst\": \"aa:bb:cc:11:22:33/00:00:00:00:ff:ff\"}'],\n  [\"eth_type\", \"Ethernet frame type (int)\", '{\"eth_type\": 2048}'],\n  [\"dl_type\", \"Ethernet frame type (int)\", '{\"eth_type\": 2048}'],\n  [\"vlan_vid\", \"VLAN id (int or string)\", \"See Example of VLAN ID match field\"],\n  [\"vlan_pcp\", \"VLAN priority (int)\", '{\"vlan_pcp\": 3, \"vlan_vid\": 3}'],\n  [\"ip_dscp\", \"IP DSCP (6 bits in ToS field) (int)\", '{\"ip_dscp\": 3, \"eth_type\": 2048}'],\n  [\"ip_ecn\", \"IP ECN (2 bits in ToS field) (int)\", '{\"ip_ecn\": 0, \"eth_type\": 34525}'],\n  [\"ip_proto\", \"IP protocol (int)\", '{\"ip_proto\": 5, \"eth_type\": 34525}'],\n  [\"ipv4_src\", \"IPv4 source address (string)\", '{\"ipv4_src\": \"192.168.0.1\", \"eth_type\": 2048}'],\n  [\"ipv4_dst\", \"IPv4 destination address (string)\", '{\"ipv4_dst\": \"192.168.10.10/255.255.255.0\", \"eth_type\": 2048}'],\n  [\"tcp_src\", \"TCP source port (int)\", '{\"tcp_src\": 3, \"ip_proto\": 6, \"eth_type\": 2048}'],\n  [\"tcp_dst\", \"TCP destination port (int)\", '{\"tcp_dst\": 5, \"ip_proto\": 6, \"eth_type\": 2048}'],\n  [\"udp_src\", \"UDP source port (int)\", '{\"udp_src\": 2, \"ip_proto\": 17, \"eth_type\": 2048}'],\n  [\"udp_dst\", \"UDP destination port (int)\", '{\"udp_dst\": 6, \"ip_proto\": 17, \"eth_type\": 2048}'],\n  [\"sctp_src\", \"SCTP source port (int)\", '{\"sctp_src\": 99, \"ip_proto\": 132, \"eth_type\": 2048}'],\n  [\"sctp_dst\", \"SCTP destination port (int)\", '{\"sctp_dst\": 99, \"ip_proto\": 132, \"eth_type\": 2048}'],\n  [\"icmpv4_type\", \"ICMP type (int)\", '{\"icmpv4_type\": 5, \"ip_proto\": 1, \"eth_type\": 2048}'],\n  [\"icmpv4_code\", \"ICMP code (int)\", '{\"icmpv4_code\": 6, \"ip_proto\": 1, \"eth_type\": 2048}'],\n  [\"arp_op\", \"ARP opcode (int)\", '{\"arp_op\": 3, \"eth_type\": 2054}'],\n  [\"arp_spa\", \"ARP source IPv4 address (string)\", '{\"arp_spa\": \"192.168.0.11\", \"eth_type\": 2054}'],\n  [\"arp_tpa\", \"ARP target IPv4 address (string)\", '{\"arp_tpa\": \"192.168.0.44/24\", \"eth_type\": 2054}'],\n  [\"arp_sha\", \"ARP source hardware address (string)\", '{\"arp_sha\": \"aa:bb:cc:11:22:33\", \"eth_type\": 2054}'],\n  [\n    \"arp_tha\",\n    \"ARP target hardware address (string)\",\n    '{\"arp_tha\": \"aa:bb:cc:11:22:33/00:00:00:00:ff:ff\", \"eth_type\": 2054}',\n  ],\n  [\"ipv6_src\", \"IPv6 source address (string)\", '{\"ipv6_src\": \"2001::aaaa:bbbb:cccc:1111\", \"eth_type\": 34525}'],\n  [\"ipv6_dst\", \"IPv6 destination address (string)\", '{\"ipv6_dst\": \"2001::ffff:cccc:bbbb:1111/64\", \"eth_type\": 34525}'],\n  [\"ipv6_flabel\", \"IPv6 Flow Label (int)\", '{\"ipv6_flabel\": 2, \"eth_type\": 34525}'],\n  [\"icmpv6_type\", \"ICMPv6 type (int)\", '{\"icmpv6_type\": 3, \"ip_proto\": 58, \"eth_type\": 34525}'],\n  [\"icmpv6_code\", \"ICMPv6 code (int)\", '{\"icmpv6_code\": 4, \"ip_proto\": 58, \"eth_type\": 34525}'],\n  [\n    \"ipv6_nd_target\",\n    \"Target address for Neighbor Discovery (string)\",\n    '{\"ipv6_nd_target\": \"2001::ffff:cccc:bbbb:1111\", \"icmpv6_type\": 135, \"ip_proto\": 58, \"eth_type\": 34525}',\n  ],\n  [\n    \"ipv6_nd_sll\",\n    \"Source link-layer for Neighbor Discovery (string)\",\n    '{\"ipv6_nd_sll\": \"aa:bb:cc:11:22:33\", \"icmpv6_type\": 135, \"ip_proto\": 58, \"eth_type\": 34525}',\n  ],\n  [\n    \"ipv6_nd_tll\",\n    \"Target link-layer for Neighbor Discovery (string)\",\n    '{\"ipv6_nd_tll\": \"aa:bb:cc:11:22:33\", \"icmpv6_type\": 136, \"ip_proto\": 58, \"eth_type\": 34525}',\n  ],\n  [\"mpls_label\", \"MPLS label (int)\", '{\"mpls_label\": 3, \"eth_type\": 34888}'],\n  [\"mpls_tc\", \"MPLS Traffic Class (int)\", '{\"mpls_tc\": 2, \"eth_type\": 34888}'],\n  [\"mpls_bos\", \"MPLS BoS bit (int) (Openflow1.3+)\", '{\"mpls_bos\": 1, \"eth_type\": 34888}'],\n  [\n    \"pbb_isid\",\n    \"PBB I-SID (int or string) (Openflow1.3+)\",\n    '{\"pbb_isid\": 5, \"eth_type\": 35047} or{\"pbb_isid\": \"0x05/0xff\", \"eth_type\": 35047}',\n  ],\n  [\n    \"tunnel_id\",\n    \"Logical Port Metadata (int or string) (Openflow1.3+)\",\n    '{\"tunnel_id\": 7} or {\"tunnel_id\": \"0x07/0xff\"}',\n  ],\n  [\n    \"ipv6_exthdr\",\n    \"IPv6 Extension Header pseudo-field (int or string) (Openflow1.3+)\",\n    '{\"ipv6_exthdr\": 3, \"eth_type\": 34525} or {\"ipv6_exthdr\": \"0x40/0x1F0\", \"eth_type\": 34525}',\n  ],\n  // [\"pbb_uca\", \"PBB UCA hander field(int) (Openflow1.4+)\", '{\"pbb_uca\": 1, \"eth_type\": 35047}'],\n  // [\"tcp_flags\", \"TCP flags(int) (Openflow1.5+)\", '{\"tcp_flags\": 2, \"ip_proto\": 6, \"eth_type\": 2048}'],\n  // [\"actset_output\", \"Output port from action set metadata(int) (Openflow1.5+)\", '{\"actset_output\": 3}'],\n  // [\"packet_type\", \"Packet type value(int) (Openflow1.5+)\", '{\"packet_type\": [1, 2048]}'],\n] as const;\n\n// export type matchFieldsType = typeof matchFields[number][0];\n\n// export const matchFields = [\n//   [\"in_port\", \"Switch input port (int)\", '{\"in_port\": 7}'],\n//   [\"in_phy_port\", \"Switch physical input port (int)\", '{\"in_phy_port\": 5, \"in_port\": 3}'],\n//   [\n//     \"metadata\",\n//     \"Metadata passed between tables (int or string)\",\n//     '{\"metadata\": 12345} or {\"metadata\": \"0x1212/0xffff\"}',\n//   ],\n//   [\"eth_src\", \"(string)\"]\n//   [\"dl_src\", \"(string)\"]\n//   [\"eth_dst\", \"(string)\"]\n//   [\"dl_dst\", \"(string)\"]\n//   [\"eth_type\", \"(int)]\n//   [\"dl_type\", \"(int)]\n//   [\"vlan_vid\", \"(int or string)\"],\n//   [\"vlan_pcp\", \"VLAN priority (int)\", '{\"vlan_pcp\": 3, \"vlan_vid\": 3}'],\n//   [\"ip_dscp\", \"IP DSCP (6 bits in ToS field) (int)\", '{\"ip_dscp\": 3, \"eth_type\": 2048}'],\n//   [\"ip_ecn\", \"IP ECN (2 bits in ToS field) (int)\", '{\"ip_ecn\": 0, \"eth_type\": 34525}'],\n//   [\"ip_proto\", \"IP protocol (int)\", '{\"ip_proto\": 5, \"eth_type\": 34525}'],\n//   [\"ipv4_src\", \"IPv4 source address (string)\", '{\"ipv4_src\": \"192.168.0.1\", \"eth_type\": 2048}'],\n//   [\"ipv4_dst\", \"IPv4 destination address (string)\", '{\"ipv4_dst\": \"192.168.10.10/255.255.255.0\", \"eth_type\": 2048}'],\n//   [\"tcp_src\", \"TCP source port (int)\", '{\"tcp_src\": 3, \"ip_proto\": 6, \"eth_type\": 2048}'],\n//   [\"tcp_dst\", \"TCP destination port (int)\", '{\"tcp_dst\": 5, \"ip_proto\": 6, \"eth_type\": 2048}'],\n//   [\"udp_src\", \"UDP source port (int)\", '{\"udp_src\": 2, \"ip_proto\": 17, \"eth_type\": 2048}'],\n//   [\"udp_dst\", \"UDP destination port (int)\", '{\"udp_dst\": 6, \"ip_proto\": 17, \"eth_type\": 2048}'],\n//   [\"sctp_src\", \"SCTP source port (int)\", '{\"sctp_src\": 99, \"ip_proto\": 132, \"eth_type\": 2048}'],\n//   [\"sctp_dst\", \"SCTP destination port (int)\", '{\"sctp_dst\": 99, \"ip_proto\": 132, \"eth_type\": 2048}'],\n//   [\"icmpv4_type\", \"ICMP type (int)\", '{\"icmpv4_type\": 5, \"ip_proto\": 1, \"eth_type\": 2048}'],\n//   [\"icmpv4_code\", \"ICMP code (int)\", '{\"icmpv4_code\": 6, \"ip_proto\": 1, \"eth_type\": 2048}'],\n//   [\"arp_op\", \"ARP opcode (int)\", '{\"arp_op\": 3, \"eth_type\": 2054}'],\n//   [\"arp_spa\", \"ARP source IPv4 address (string)\", '{\"arp_spa\": \"192.168.0.11\", \"eth_type\": 2054}'],\n//   [\"arp_tpa\", \"ARP target IPv4 address (string)\", '{\"arp_tpa\": \"192.168.0.44/24\", \"eth_type\": 2054}'],\n//   [\"arp_sha\", \"ARP source hardware address (string)\", '{\"arp_sha\": \"aa:bb:cc:11:22:33\", \"eth_type\": 2054}'],\n//   [\n//     \"arp_tha\",\n//     \"ARP target hardware address (string)\",\n//     '{\"arp_tha\": \"aa:bb:cc:11:22:33/00:00:00:00:ff:ff\", \"eth_type\": 2054}',\n//   ],\n//   [\"ipv6_src\", \"IPv6 source address (string)\", '{\"ipv6_src\": \"2001::aaaa:bbbb:cccc:1111\", \"eth_type\": 34525}'],\n//   [\"ipv6_dst\", \"IPv6 destination address (string)\", '{\"ipv6_dst\": \"2001::ffff:cccc:bbbb:1111/64\", \"eth_type\": 34525}'],\n//   [\"ipv6_flabel\", \"IPv6 Flow Label (int)\", '{\"ipv6_flabel\": 2, \"eth_type\": 34525}'],\n//   [\"icmpv6_type\", \"ICMPv6 type (int)\", '{\"icmpv6_type\": 3, \"ip_proto\": 58, \"eth_type\": 34525}'],\n//   [\"icmpv6_code\", \"ICMPv6 code (int)\", '{\"icmpv6_code\": 4, \"ip_proto\": 58, \"eth_type\": 34525}'],\n//   [\n//     \"ipv6_nd_target\",\n//     \"Target address for Neighbor Discovery (string)\",\n//     '{\"ipv6_nd_target\": \"2001::ffff:cccc:bbbb:1111\", \"icmpv6_type\": 135, \"ip_proto\": 58, \"eth_type\": 34525}',\n//   ],\n//   [\n//     \"ipv6_nd_sll\",\n//     \"Source link-layer for Neighbor Discovery (string)\",\n//     '{\"ipv6_nd_sll\": \"aa:bb:cc:11:22:33\", \"icmpv6_type\": 135, \"ip_proto\": 58, \"eth_type\": 34525}',\n//   ],\n//   [\n//     \"ipv6_nd_tll\",\n//     \"Target link-layer for Neighbor Discovery (string)\",\n//     '{\"ipv6_nd_tll\": \"aa:bb:cc:11:22:33\", \"icmpv6_type\": 136, \"ip_proto\": 58, \"eth_type\": 34525}',\n//   ],\n//   [\"mpls_label\", \"MPLS label (int)\", '{\"mpls_label\": 3, \"eth_type\": 34888}'],\n//   [\"mpls_tc\", \"MPLS Traffic Class (int)\", '{\"mpls_tc\": 2, \"eth_type\": 34888}'],\n//   [\"mpls_bos\", \"MPLS BoS bit (int) (Openflow1.3+)\", '{\"mpls_bos\": 1, \"eth_type\": 34888}'],\n//   [\n//     \"pbb_isid\",\n//     \"PBB I-SID (int or string) (Openflow1.3+)\",\n//     '{\"pbb_isid\": 5, \"eth_type\": 35047} or{\"pbb_isid\": \"0x05/0xff\", \"eth_type\": 35047}',\n//   ],\n//   [\n//     \"tunnel_id\",\n//     \"Logical Port Metadata (int or string) (Openflow1.3+)\",\n//     '{\"tunnel_id\": 7} or {\"tunnel_id\": \"0x07/0xff\"}',\n//   ],\n//   [\n//     \"ipv6_exthdr\",\n//     \"IPv6 Extension Header pseudo-field (int or string) (Openflow1.3+)\",\n//     '{\"ipv6_exthdr\": 3, \"eth_type\": 34525} or {\"ipv6_exthdr\": \"0x40/0x1F0\", \"eth_type\": 34525}',\n//   ],\n//   // [\"pbb_uca\", \"PBB UCA hander field(int) (Openflow1.4+)\", '{\"pbb_uca\": 1, \"eth_type\": 35047}'],\n//   // [\"tcp_flags\", \"TCP flags(int) (Openflow1.5+)\", '{\"tcp_flags\": 2, \"ip_proto\": 6, \"eth_type\": 2048}'],\n//   // [\"actset_output\", \"Output port from action set metadata(int) (Openflow1.5+)\", '{\"actset_output\": 3}'],\n//   // [\"packet_type\", \"Packet type value(int) (Openflow1.5+)\", '{\"packet_type\": [1, 2048]}'],\n// ] as const;\n\nexport const actionsFields = [\n  [\"OUTPUT\", 'Output packet from \"port\"', '{\"type\": \"OUTPUT\", \"port\": 3}'],\n  [\"COPY_TTL_OUT\", \"Copy TTL outwards\", '{\"type\": \"COPY_TTL_OUT\"}'],\n  [\"COPY_TTL_IN\", \"Copy TTL inwards\", '{\"type\": \"COPY_TTL_IN\"}'],\n  [\"SET_MPLS_TTL\", 'Set MPLS TTL using \"mpls_ttl\"', '{\"type\": \"SET_MPLS_TTL\", \"mpls_ttl\": 64}'],\n  [\"DEC_MPLS_TTL\", \"Decrement MPLS TTL\", '{\"type\": \"DEC_MPLS_TTL\"}'],\n  [\"PUSH_VLAN\", 'Push a new VLAN tag with \"ethertype\"', '{\"type\": \"PUSH_VLAN\", \"ethertype\": 33024}'],\n  [\"POP_VLAN\", \"Pop the outer VLAN tag\", '{\"type\": \"POP_VLAN\"}'],\n  [\"PUSH_MPLS\", 'Push a new MPLS tag with \"ethertype\"', '{\"type\": \"PUSH_MPLS\", \"ethertype\": 34887}'],\n  [\"POP_MPLS\", 'Pop the outer MPLS tag with \"ethertype\"', '{\"type\": \"POP_MPLS\", \"ethertype\": 2054}'],\n  [\"SET_QUEUE\", 'Set queue id using \"queue_id\" when outputting to a port', '{\"type\": \"SET_QUEUE\", \"queue_id\": 7}'],\n  [\"GROUP\", 'Apply group identified by \"group_id\"', '{\"type\": \"GROUP\", \"group_id\": 5}'],\n  [\"SET_NW_TTL\", 'Set IP TTL using \"nw_ttl\"', '{\"type\": \"SET_NW_TTL\", \"nw_ttl\": 64}'],\n  [\"DEC_NW_TTL\", \"Decrement IP TTL\", '{\"type\": \"DEC_NW_TTL\"}'],\n  [\n    \"SET_FIELD\",\n    'Set a \"field\" using \"value\" (The set of keywords available for \"field\" is the same as match field)',\n    \"See Example of set-field action\",\n  ],\n  [\n    \"PUSH_PBB\",\n    'Push a new PBB service tag with \"ethertype\" (Openflow1.3+)',\n    '{\"type\": \"PUSH_PBB\", \"ethertype\": 35047}',\n  ],\n  [\"POP_PBB\", \"Pop the outer PBB service tag (Openflow1.3+)\", '{\"type\": \"POP_PBB\"}'],\n  // [\n  //   \"COPY_FIELD\",\n  //   \"Copy value between header and register (Openflow1.5+)\",\n  //   '{\"type\": \"COPY_FIELD\", \"n_bits\": 32, \"src_offset\": 1, \"dst_offset\": 2, \"src_oxm_id\": \"eth_src\", \"dst_oxm_id\": \"eth_dst\"}',\n  // ],\n  // [\"METER\", 'Apply meter identified by \"meter_id\" (Openflow1.5+)', '{\"type\": \"METER\", \"meter_id\": 3}'],\n  [\n    \"EXPERIMENTER\",\n    'Extensible action for the experimenter (Set \"base64\" or \"ascii\" to \"data_type\" field)',\n    '{\"type\": \"EXPERIMENTER\", \"experimenter\": 101, \"data\": \"AAECAwQFBgc=\", \"data_type\": \"base64\"}',\n  ],\n  [\n    \"GOTO_TABLE\",\n    '(Instruction) Setup the next table identified by \"table_id\"',\n    '{\"type\": \"GOTO_TABLE\", \"table_id\": 8}',\n  ],\n  [\n    \"WRITE_METADATA\",\n    '(Instruction) Setup the metadata field using \"metadata\" and \"metadata_mask\"',\n    '{\"type\": \"WRITE_METADATA\", \"metadata\": 0x3, \"metadata_mask\": 0x3}',\n  ],\n  [\n    \"METER\",\n    '(Instruction) Apply meter identified by \"meter_id\" (deprecated in Openflow1.5)',\n    '{\"type\": \"METER\", \"meter_id\": 3}',\n  ],\n  [\n    \"WRITE_ACTIONS\",\n    \"(Instruction) Write the action(s) onto the datapath action set\",\n    '{\"type\": \"WRITE_ACTIONS\", actions\":[{\"type\":\"POP_VLAN\",},{ \"type\":\"OUTPUT\", \"port\": 2}]}',\n  ],\n  [\"CLEAR_ACTIONS\", \"(Instruction) Clears all actions from the datapath action set\", '{\"type\": \"CLEAR_ACTIONS\"}'],\n] as const;\n\n// export type actionsFieldsType = typeof actionsFields[number][0];\n\nexport type sectionNameType = \"actions\" | \"match\";\nexport type fieldsType<secName extends sectionNameType> = secName extends \"match\"\n  ? typeof matchFields\n  : typeof actionsFields;\nexport type fieldsNameType<secName extends sectionNameType> = fieldsType<secName>[number][0];\n\n// matchFields.map(m=> ({[m[0]]:m[1].concat}))\n","import React, { useState, useContext, useEffect, useRef, useImperativeHandle } from \"react\";\nimport Draggable from \"react-draggable\";\n// import MaterialIcon from \"material-icons-react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\nimport CloseOutlinedIcon from \"@material-ui/icons/CloseOutlined\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n// import SettingsBackupRestoreIcon from \"@material-ui/icons/SettingsBackupRestore\";\nimport Popup from \"reactjs-popup\";\nimport { matchFields, actionsFields } from \"../components/aclsFields\";\nimport { CanvasContext, flowEntryType, flowEntryDetailsType } from \"../SwitchView\";\nimport { BoxType } from \"../components/Box\";\nimport { isEqual } from \"lodash\";\n\n// const useStateWithCallback = (initialState, callback?) => {\n//   const [state, setState] = useState(initialState);\n\n//   useEffect(() => (callback ? callback(state) : null), [state, callback]);\n\n//   return [state, setState];\n// };\n\nconst BoxDetailsModal = ({ flow }: { flow: flowEntryType }) => {\n  const c = useContext(CanvasContext);\n  // if (!flow.details) flow.details = { match: {}, actions: {}, priority: 1 };\n\n  const [matchDetails, setMatchDetails] = useState({ ...flow.details.match });\n  const [actionsDetails, setActionsDetails] = useState({ ...flow.details.actions });\n\n  // const selfRef = useRef(null);\n\n  // React.createRef();\n  // flow.box.flowDetailsModalRef = fref;\n  // useEffect(() => {\n  //   flow.box.flowDetailsModalRef = useRef();\n  // }, []);\n\n  // useImperativeHandle(fref, () => ({\n  //   handleSaveChanges,\n  //   flow,\n  // }));\n\n  const modDetails: flowEntryDetailsType = {\n    match: { ...matchDetails },\n    actions: { ...actionsDetails },\n    priority: flow.details.priority = 1,\n  };\n\n  const handleSaveChanges = (flowDetails?: flowEntryDetailsType) => {\n    // const newBox = { ...flow.box, modData: modDetails }\n    // c.updateFlowOnServer(modDetails,()=> c.updateBox({ ...flow.box, modData: modDetails }));\n    const updatedFlow: flowEntryType = {\n      ...flow,\n      details: flowDetails ? flowDetails : modDetails,\n      isSynced: true,\n      box: { ...flow.box, flowDetailsModalOpen: false },\n    };\n    // c.updateFlowOnServer(updatedFlow.details, () => c.updateFlow(updatedFlow));\n    c.updateFlowOnServer(updatedFlow);\n\n    // c.updateBox({ ...flow.box });\n  };\n\n  const handleClose = () => {\n    c.updateBoxOnUi({ ...flow.box, flowDetailsModalOpen: false });\n  };\n\n  const handleConfirmFlow = () => {\n    //here we should add this flow to the the vSwitch\n    // c.addFlowToServer(flow, modDetails, handleSaveChanges);\n    // c.addFlowToServer({ ...flow, details: modDetails });\n    c.addFlowToServer({ ...flow, details: modDetails }, (flowDetails) => handleSaveChanges(flowDetails));\n  };\n  // console.log(\"ModBoxWindow render\", flow.details, { ...flow.details, ...modDetails });\n\n  return (\n    <Draggable enableUserSelectHack={false} defaultPosition={{ x: flow.box.x, y: flow.box.y - 100 }}>\n      <div className=\"menuWindowContainer\" onClick={(e) => e.stopPropagation()}>\n        <div style={{ display: \"flex\", alignSelf: \"flex-end\" }}>\n          {isEqual(flow.details, { ...flow.details, ...modDetails }) === false && flow.isSynced ? (\n            <>\n              <SaveIcon\n                titleAccess=\"Update changes of this flow entry on the vSwitch\"\n                className=\"button\"\n                fontSize={\"large\"}\n                style={{ position: \"relative\" }}\n                onClick={() => handleSaveChanges()}\n              />\n            </>\n          ) : null}\n          <CloseOutlinedIcon\n            fontSize={\"large\"}\n            className=\"button closeButton\"\n            onClick={handleClose}\n            titleAccess=\"Close\"\n          />\n          {flow.isSynced ? null : (\n            <CheckIcon\n              fontSize={\"large\"}\n              className=\"button closeButton\"\n              onClick={handleConfirmFlow}\n              titleAccess=\"Confirm new flow\"\n            />\n          )}\n        </div>\n\n        {/* <div className={\"header\"}>{`${flow.box.name}`}</div> */}\n        <div className=\"header\">\n          <InputBase\n            defaultValue={flow.box.name}\n            inputProps={{ \"aria-label\": \"naked\", style: { textAlign: \"center\" } }}\n            style={{ fontSize: \"1.4em\" }}\n            onChange={(e) => c.updateFlowName(flow.box.id, e.target.value)}\n          />\n        </div>\n        <hr style={{ width: \"90%\" }} />\n        <div className=\"propsContainer\">\n          <SectionMenu sectionName=\"match\" fields={matchFields} details={matchDetails} setDetails={setMatchDetails} />\n          <SectionMenu\n            sectionName=\"actions\"\n            fields={actionsFields}\n            details={actionsDetails}\n            setDetails={setActionsDetails}\n          />\n        </div>\n      </div>\n    </Draggable>\n  );\n};\n\ntype sectionNameType = \"actions\" | \"match\";\ntype fieldsType<secName extends sectionNameType> = secName extends \"match\" ? typeof matchFields : typeof actionsFields;\ntype fieldsNameType<secName extends sectionNameType> = fieldsType<secName>[number][0];\n\nconst SectionMenu = <SecName extends sectionNameType>({\n  sectionName,\n  fields,\n  details,\n  setDetails,\n}: {\n  sectionName: SecName;\n  fields: fieldsType<SecName>;\n  // details: BoxType[\"modData\"][SecName];\n  details: flowEntryDetailsType[SecName];\n  setDetails: React.Dispatch<React.SetStateAction<flowEntryDetailsType[SecName]>>;\n}) => {\n  const c = useContext(CanvasContext);\n\n  type fieldName = fieldsNameType<SecName>;\n\n  const handleAddField = (key: fieldName) => {\n    setDetails({ ...Object.assign(details, { [key]: \"\" }) });\n  };\n\n  useEffect(() => {}, [details]);\n\n  const handleDelField = (key: fieldName) => {\n    setDetails((details) => {\n      // key = \"OUTPUT\";\n      // newDetails.\n      const newDetails = { ...details };\n      // newDetails.\n      delete (newDetails as any)[key];\n      return newDetails;\n    });\n  };\n\n  const handleSaveFieldChange = (value: string, key: fieldName) => {\n    setDetails({ ...Object.assign(details, { [key]: value }) });\n  };\n\n  return (\n    <div className=\"section\">\n      <PopUpMenu handleAddField={handleAddField} fields={fields} secName={sectionName} />\n      <div className=\"sectionHeader\">{sectionName}:</div>\n      {Object.keys(details).map((key) => (\n        <InputField\n          {...{\n            key,\n            name: key,\n            value: (details as any)[key],\n            handleDelField,\n            handleSaveFieldChange,\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n\nconst InputField = <SecName extends sectionNameType>({\n  name,\n  value,\n  handleDelField,\n  handleSaveFieldChange,\n}: {\n  name: string;\n  value: string;\n  handleDelField: (key: fieldsNameType<SecName>) => void;\n  handleSaveFieldChange: (value: string, key: fieldsNameType<SecName>) => void;\n}) => {\n  // const [value, setValue] = useState(initialValue);\n\n  return (\n    <div className=\"propBox\" key={name}>\n      <div className=\"propField propKey\">\n        <div>{name}</div>\n      </div>\n      <div\n        className=\"propField propValue\"\n        onMouseDown={\n          (e) => e.stopPropagation() // prevent the draging whan selecting text\n        }\n      >\n        <TextField\n          type=\"text\"\n          value={value}\n          className=\"inputField\"\n          placeholder=\"Enter Value...\"\n          onChange={(e) => handleSaveFieldChange(e.target.value, name as any)}\n          style={{ fontSize: \"0.9em\" }}\n        />\n      </div>\n      <DeleteOutlinedIcon\n        titleAccess=\"Delete this field\"\n        fontSize={\"large\"}\n        className=\"button addButton\"\n        onClick={() => handleDelField(name as fieldsNameType<SecName>)}\n      />\n    </div>\n  );\n};\n\nconst PopUpMenu = <SecName extends sectionNameType>({\n  handleAddField,\n  fields,\n  secName,\n}: {\n  fields: fieldsType<SecName>;\n  handleAddField: (key: fieldsNameType<SecName>) => void;\n  secName: SecName;\n}) => {\n  const [filterField, setFilterField] = useState(\"\");\n\n  fields = fields\n    ? filterField\n      ? (fields as any).filter((f: fieldsType<SecName>[number]) => f[0].includes(filterField))\n      : fields\n    : [];\n\n  return (\n    <Popup\n      trigger={\n        <div className=\"button addButton\">\n          <AddOutlinedIcon fontSize={\"large\"} />\n        </div>\n      }\n      position=\"right top\"\n      on=\"hover\"\n      closeOnDocumentClick\n      mouseLeaveDelay={400}\n      mouseEnterDelay={0}\n      contentStyle={{ border: \"none\", width: 200, transition: \"all 1s ease-out\" }}\n      arrow={true}\n    >\n      <div>\n        <input\n          value={filterField}\n          type=\"text\"\n          style={{ width: 100, border: \"none\", fontSize: \"0.9em\" }}\n          placeholder=\"filter...\"\n          onChange={(e) => setFilterField(e.target.value)}\n        />\n        <div className=\"popupMenu\">\n          {(fields as any).map((field: fieldsType<SecName>[number]) => (\n            <Popup\n              key={field[0]}\n              trigger={\n                <div key={field[0]} className=\"menu-item\" onClick={() => handleAddField(field[0])}>\n                  {field[0]}\n                </div>\n              }\n              position=\"right top\"\n              on=\"hover\"\n              mouseLeaveDelay={200}\n              mouseEnterDelay={200}\n              contentStyle={{ border: \"none\", width: 200 }}\n              arrow={true}\n            >\n              <Popup\n                key={field[0]}\n                trigger={<div>{field[1]}</div>}\n                position=\"top center\"\n                on=\"hover\"\n                mouseLeaveDelay={0}\n                mouseEnterDelay={0}\n                contentStyle={{ border: \"none\", width: 200 }}\n                arrow={true}\n              >\n                {field[2] as any}\n              </Popup>\n            </Popup>\n          ))}\n        </div>\n      </div>\n    </Popup>\n  );\n};\n\nexport default BoxDetailsModal;\n","import React, { useState, useRef, useContext } from \"react\";\nimport Xarrow from \"react-xarrows\";\nimport { CanvasContext } from \"../SwitchView\";\nimport { PortType } from \"./Port\";\nimport { BoxType } from \"./Box\";\n\nconst connectPointStyle = {\n  position: \"absolute\",\n  width: 10,\n  height: 10,\n  borderRadius: \"50%\",\n  background: \"black\",\n};\nconst connectPointOffset = {\n  left: { left: 0, top: \"50%\", transform: \"translate(-50%, -50%)\" },\n  right: { left: \"100%\", top: \"50%\", transform: \"translate(-50%, -50%)\" },\n  top: { left: \"50%\", top: 0, transform: \"translate(-50%, -50%)\" },\n  bottom: { left: \"50%\", top: \"100%\", transform: \"translate(-50%, -50%)\" },\n} as const;\n\nconst ConnectPointsWrapper = ({\n  element,\n  handlers = [\"left\", \"right\", \"bottom\", \"top\"],\n  elemPos = { x: 0, y: 0 },\n}: {\n  element: BoxType | PortType;\n  handlers?: (keyof typeof connectPointOffset)[];\n  elemPos?: { x: number; y: number };\n}) => {\n  return (\n    <React.Fragment>\n      {handlers.map((handler) => (\n        <ConnectPoint {...{ handler, element, elemPos, key: handler }} />\n      ))}\n    </React.Fragment>\n  );\n};\n\nconst ConnectPoint = ({\n  element,\n  handler,\n  elemPos = { x: 0, y: 0 },\n}: {\n  element: BoxType | PortType;\n  handler?: keyof typeof connectPointOffset;\n  elemPos?: { x: number; y: number };\n}) => {\n  const c = useContext(CanvasContext);\n  const ref1 = useRef();\n\n  const [position, setPosition] = useState({});\n  const [beingDragged, setBeingDragged] = useState(false);\n\n  return (\n    <React.Fragment key={handler}>\n      <div\n        className=\"connectPoint\"\n        style={\n          {\n            ...connectPointStyle,\n            ...connectPointOffset[handler],\n            ...position,\n            zIndex: 1,\n          } as React.CSSProperties\n        }\n        draggable\n        onMouseDown={(e) => e.stopPropagation()}\n        onDragStart={(e) => {\n          setBeingDragged(true);\n          c.setSelected(element);\n          c.handleBoxClick(e, element);\n          c.setActionState(\"Add Connections\");\n          e.dataTransfer.setData(\"arrow\", element.id);\n        }}\n        onDrag={(e) => {\n          setPosition({\n            position: \"fixed\",\n            left: e.clientX - elemPos.x,\n            top: e.clientY - elemPos.y,\n            transform: \"none\",\n            opacity: 0,\n          });\n        }}\n        ref={ref1}\n        onDragEnd={(e) => {\n          setPosition({});\n          setBeingDragged(false);\n          c.handleSelect(null);\n        }}\n      />\n      {beingDragged ? (\n        <Xarrow\n          start={element.id}\n          end={ref1}\n          startAnchor={handler}\n          advanced={{ passProps: { divContainer: { style: { zIndex: 1 } } } }}\n        />\n      ) : null}\n    </React.Fragment>\n  );\n};\n\nexport default ConnectPointsWrapper;\n// export default DragDropContext(HTML5Backend)(DragSource(\"connectPoint\", dndSource, dndCollect)(ConnectPointsWrapper));\n","import React, { useState, useContext, useRef } from \"react\";\nimport Popup from \"reactjs-popup\";\nimport ConnectPointsWrapper from \"./ConnectPointsWrapper\";\n// import XarrowWrapper from \"./XarrowWrapper\";\n// import AttachXarrow from \"./AttachXarrow\";\nimport { CanvasContext, lineType } from \"../SwitchView\";\nimport { portDetailsType } from \"../../../App\";\nimport { portPolarityType } from \"./PortsBar\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nexport type PortType = {\n  id: string;\n  name: string;\n  port: portDetailsType;\n  ref: React.MutableRefObject<any>;\n  shape: \"portBox\";\n};\n\nconst Port = ({ port, portPolarity, lines }: { port: PortType; portPolarity: portPolarityType; lines: lineType[] }) => {\n  const c = useContext(CanvasContext);\n  const [wasDragged, setWasDragged] = useState(false);\n  let background = c.chooseBoxBackground(port);\n  port.ref = useRef();\n\n  return (\n    <div>\n      <Tooltip\n        interactive\n        arrow\n        enterDelay={800}\n        title={(Object.keys(port.port) as Array<keyof portDetailsType>).map((detail, i) => {\n          return (\n            <div key={detail} style={{ fontSize: 13, marginBottom: 2 }}>\n              {detail}: {port.port[detail]}\n              <br />\n            </div>\n          );\n        })}\n      >\n        <div>\n          <div\n            ref={port.ref}\n            className={`portBox hoverMarker`}\n            style={{ background }}\n            onClick={(e) => {\n              if (wasDragged === false) c.handleBoxClick(e, port);\n              setWasDragged(false);\n            }}\n            id={port.id}\n            onDragOver={(e) => e.preventDefault()}\n            onDrop={(e) => {\n              if (e.dataTransfer.getData(\"arrow\") !== port.id) {\n                if (portPolarity === \"output\")\n                  c.addLine({ startBoxId: e.dataTransfer.getData(\"arrow\"), endBoxId: port.id });\n              }\n            }}\n          >\n            <ConnectPointsWrapper element={port} handlers={portPolarity === \"input\" ? [\"right\"] : []} />\n            <div>\n              {port.name}\n              <br />\n              (...{port.port.hw_addr.slice(-5)})\n              <br />({port.port.port_no})\n            </div>\n          </div>\n\n          {/* {lines\n            .filter((line) => line.props.start === port.id)\n            .map((line, i) => (\n              <XarrowWrapper key={line.props.start + \"-\" + line.props.end + i} {...{ line, selected: c.selected }} />\n            ))} */}\n        </div>\n      </Tooltip>\n    </div>\n    // <div>\n    //   <Popup\n    //     trigger={\n    //       // <AttachXarrow>\n\n    //       <div\n    //         ref={port.ref}\n    //         className={`portBox hoverMarker`}\n    //         style={{ background }}\n    //         onClick={(e) => {\n    //           if (wasDragged === false) c.handleBoxClick(e, port);\n    //           setWasDragged(false);\n    //         }}\n    //         id={port.id}\n    //         onDragOver={(e) => e.preventDefault()}\n    //         onDrop={(e) => {\n    //           if (e.dataTransfer.getData(\"arrow\") !== port.id) {\n    //             if (portPolarity === \"output\")\n    //               c.addLine({ startBoxId: e.dataTransfer.getData(\"arrow\"), endBoxId: port.id });\n    //           }\n    //         }}\n    //       >\n    //         <ConnectPointsWrapper element={port} handlers={portPolarity === \"input\" ? [\"right\"] : []} />\n    //         <div>\n    //           {port.name}\n    //           <br />\n    //           (...{port.port.hw_addr.slice(-5)})\n    //           <br />({port.port.port_no})\n    //         </div>\n    //       </div>\n    //       // {/* </AttachXarrow> */}\n    //     }\n    //     position=\"left center\"\n    //     on=\"hover\"\n    //     closeOnDocumentClick\n    //     mouseLeaveDelay={100}\n    //     mouseEnterDelay={500}\n    //     contentStyle={{ width: \"max-content\" }}\n    //     arrow={true}\n    //   >\n    //     <div>\n    //       {(Object.keys(port.port) as Array<keyof portDetailsType>).map((detail, i) => {\n    //         detail = detail;\n    //         let s = detail;\n    //         return (\n    //           <div key={detail}>\n    //             {detail}: {port.port[detail]}\n    //             <br />\n    //           </div>\n    //         );\n    //       })}\n    //       {/* {lines\n    //         .filter((line) => line.props.start === port.id)\n    //         .map((line, i) => (\n    //           <XarrowWrapper key={line.props.start + \"-\" + line.props.end + i} {...{ line, selected: c.selected }} />\n    //         ))} */}\n    //     </div>\n    //   </Popup>\n    // </div>\n  );\n};\n\nexport default React.memo(Port);\n","import React, { useContext } from \"react\";\nimport Port, { PortType } from \"./Port\";\nimport { lineType } from \"../SwitchView\";\nimport XarrowWrapper from \"./XarrowWrapper\";\nimport { CanvasContext } from \"../SwitchView\";\n\nexport type portPolarityType = \"input\" | \"output\";\n\nconst PortBar = ({\n  ports,\n  portPolarity,\n  lines = [],\n}: {\n  ports: PortType[];\n  portPolarity: portPolarityType;\n  lines?: lineType[];\n}) => {\n  //   console.log(\"PortsBar renderd\");\n  const c = useContext(CanvasContext);\n\n  return (\n    <div className=\"portsBarStyle\" id=\"portsInputsBar\">\n      <u className=\"portTitleStyle\">{portPolarity}s</u>\n      {ports.map((port) => {\n        const id = port.id + `:<${portPolarity}>`;\n        return <Port key={id} port={{ ...port, id }} portPolarity={portPolarity} lines={lines} />;\n      })}\n\n      {/* adding port will maybe be supported later */}\n      {/* <div className=\"button\" style={{ position: \"absolute\", bottom: 5 }} onClick={handleAddPort}>\n        <MaterialIcon size={30} icon=\"add\" className=\"material-icons\" />\n      </div> */}\n    </div>\n  );\n};\n\nexport default React.memo(PortBar);\n","import React from \"react\";\n\nconst TestComponent = (props) => {\n  //   const c = useContext(CanvasContext);\n  // console.log(\"!!!!!!!!!!!!!1TestComponent render!!!!!!!!!!!!\");\n  return null;\n};\n\nexport default React.memo(TestComponent);\n","import React, { useContext, useRef } from \"react\";\nimport { CanvasContext, switchSelfType, flowEntryType } from \"../SwitchView\";\nimport Draggable from \"react-draggable\";\nimport { Rnd } from \"react-rnd\";\nimport CloseOutlinedIcon from \"@material-ui/icons/CloseOutlined\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n// import { matchFieldsType } from \"../components/aclsFields\";\n\ntype SwitchDetailsWindowProps = {\n  setSwitchDetailsWindow: (value: React.SetStateAction<boolean>) => void;\n  flowEntries: switchSelfType[\"flowEntries\"];\n};\n\nconst SwitchDetailsModal = ({ setSwitchDetailsWindow, flowEntries = [] }: SwitchDetailsWindowProps) => {\n  return (\n    <Draggable enableUserSelectHack={false}>\n      <div className=\"switchDetailsWindow\" onClick={(e) => e.stopPropagation()}>\n        <CloseOutlinedIcon\n          fontSize={\"large\"}\n          className=\"button closeButton\"\n          onClick={() => setSwitchDetailsWindow(false)}\n        />\n        <div className={\"header\"}>{`Flow Entries`}</div>\n        <hr style={{ width: \"90%\" }} />\n        {flowEntries.map((flowEntry, i) =>\n          flowEntry.isSynced ? (\n            <FlowDetails key={JSON.stringify(flowEntry.details.match)} {...{ flowEntry, i }}></FlowDetails>\n          ) : null\n        )}\n        {/* <h3>unconfirmed flows</h3>\n        {flowEntries.map((flowEntry, i) =>\n          flowEntry.isSynced ? null : (\n            <FlowDetails key={JSON.stringify(flowEntry.details.match)} {...{ flowEntry, i }}></FlowDetails>\n          )\n        )} */}\n      </div>\n      {/* </Rnd> */}\n    </Draggable>\n  );\n};\n\ntype FlowDetailsProps = {\n  i: number;\n  flowEntry: flowEntryType;\n};\n\nconst FlowDetails = ({ flowEntry, i }: FlowDetailsProps) => {\n  const c = useContext(CanvasContext);\n  const { details } = flowEntry;\n  // details.\n  const background = flowEntry.box.visible ? \"LemonChiffon\" : undefined;\n\n  return (\n    <Tooltip\n      arrow\n      enterDelay={800}\n      title={Object.keys(details)\n        .filter((k) => k !== \"actions\" && k !== \"match\")\n        .map((detailKey) => (\n          <div key={detailKey} style={{ fontSize: 12 }}>\n            {/* hey */}\n            {detailKey}: {(details as any)[detailKey]}\n          </div>\n        ))}\n    >\n      <div\n        className=\"propBoxEntryPreview grayHover\"\n        style={{ background }}\n        onClick={() => c.toggleFlowVisibility(flowEntry)}\n      >\n        <div style={{ width: 20 }}>{flowEntry.box.name}:</div>\n        <div style={{ flex: 0.9 }}>\n          {\n            <ul>\n              {(Object.keys(details.match) as Array<keyof typeof details.match>).map((matchKey) => (\n                <li key={matchKey}>\n                  {matchKey}: {details.match[matchKey]}\n                </li>\n              ))}\n            </ul>\n          }\n        </div>\n        <div style={{ width: 30 }}>--{\">\"}</div>\n        <div style={{ flex: 0.9 }}>{JSON.stringify(details.actions, null, 2)}</div>\n        <EditOutlinedIcon\n          fontSize={\"large\"}\n          className={`button`}\n          onClick={(e) => {\n            e.stopPropagation();\n            c.updateBoxOnUi({ ...flowEntry.box, flowDetailsModalOpen: !flowEntry.box.flowDetailsModalOpen });\n            // c.setBoxes((boxes) => {\n            //   const newBoxes = [...boxes];\n            //   const newBox = newBoxes.find((b) => b.id === JSON.stringify(flowEntry.details.match));\n            //   newBox.menuWindowOpened = !newBox.menuWindowOpened;\n            //   return newBoxes;\n            // });\n          }}\n        />\n        <DeleteOutlineIcon\n          fontSize={\"large\"}\n          className=\"button\"\n          onClick={(e) => {\n            e.stopPropagation();\n            c.delFlow(flowEntry);\n          }}\n        />\n      </div>\n    </Tooltip>\n  );\n};\n\nexport default SwitchDetailsModal;\n","import React from \"react\";\nimport { boxShapes } from \"./../SwitchView\";\n\nconst ToolboxMenu = () => {\n  return (\n    <div className=\"toolboxMenu\">\n      <div className=\"toolboxTitle\">Drag & drop me!</div>\n      <hr />\n      <div className=\"toolboxContainer\">\n        {boxShapes.map((shapeName) => (\n          <div\n            key={shapeName}\n            className={shapeName + \" grabble\"}\n            onDragStart={(e) => e.dataTransfer.setData(\"shape\", shapeName)}\n            draggable\n          >\n            {shapeName}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ToolboxMenu;\n","import React, { useContext } from \"react\";\nimport \"./TopBar.css\";\nimport KeyboardArrowUpOutlinedIcon from \"@material-ui/icons/KeyboardArrowUpOutlined\";\n// import MaterialIcon from \"material-icons-react\";\nimport { CanvasContext } from \"../SwitchView\";\nimport { PortType } from \"./Port\";\nimport { BoxType } from \"./Box\";\nimport { Container } from \"@material-ui/core\";\n\nconst actions = {\n  modBox: [\"Edit Mods\", \"Add Connections\", \"Remove Connections\", \"Hide\", \"Delete\"],\n  portBox: [\"Add Connections\", \"Remove Connections\"],\n  portBoxOut: [],\n  arrow: [\"Remove Connection\"],\n} as const;\n\ntype Writeable<T> = { -readonly [P in keyof T]: Writeable<T[P]> };\ntype ArrayElem<A> = A extends Array<infer Elem> ? Elem : never;\nfunction elemT<T>(array: T): Array<ArrayElem<T>> {\n  return array as any;\n}\n\ntype actionsType = typeof actions;\ntype actionsKeysType = keyof actionsType;\nexport type actionsTypes = actionsType[actionsKeysType][number] | \"Normal\";\n\nconst TopBar = () => {\n  const c = useContext(CanvasContext);\n\n  // console.log(\"Topbar renderd\");\n\n  const handleEditAction = (action: actionsTypes) => {\n    switch (action) {\n      case \"Add Connections\":\n        c.setActionState(\"Add Connections\");\n        break;\n      case \"Remove Connections\":\n        // remove connections of one arrows from box based on box that was selected\n        c.setActionState(\"Remove Connections\");\n        break;\n      case \"Remove Connection\":\n        // remove connection of one arrow based on arrow that is currently selected\n        c.removeSelectedLine();\n        break;\n      case \"Edit Mods\":\n        c.openModsWindowOfSelected();\n        break;\n      case \"Hide\":\n        c.toggleFlowVisibilityOfSelected();\n        break;\n      case \"Delete\":\n        c.removeSelectedBox();\n\n        break;\n      default:\n    }\n  };\n\n  var returnTopBarAppearance = () => {\n    let allowedActions: actionsType[actionsKeysType] = [];\n\n    if (c.selected) {\n      allowedActions = actions[c.selected.shape];\n      if (c.selected.shape.includes(\"Box\") && (c.selected as BoxType | PortType).id.includes(\":<output>\"))\n        allowedActions = actions.portBoxOut;\n    }\n    switch (c.actionState) {\n      case \"Normal\":\n        return (\n          <div className=\"actionBubblesContainer\">\n            {elemT(allowedActions).map((action: actionsTypes, i: number) => (\n              <div className=\"actionBubble\" key={i} onClick={() => handleEditAction(action)}>\n                {action}\n              </div>\n            ))}\n          </div>\n        );\n      case \"Add Connections\":\n        return (\n          <div className=\"actionBubblesContainer\">\n            <p>To where connect new connection?</p>\n            <div className=\"actionBubble\" onClick={() => c.setActionState(\"Normal\")}>\n              finish\n            </div>\n          </div>\n        );\n\n      case \"Remove Connections\":\n        return (\n          <div className=\"actionBubblesContainer\">\n            <p>Which connection to remove?</p>\n          </div>\n        );\n      default:\n    }\n  };\n\n  return (\n    <div\n      className=\"topBarStyle\"\n      style={{ height: c.selected === null ? \"0\" : \"60px\" }}\n      onClick={(e) => e.stopPropagation()}\n    >\n      <div className=\"topBarLabel\" onClick={() => c.handleSelect(null)}>\n        <KeyboardArrowUpOutlinedIcon fontSize={\"large\"} className=\" topBarToggleIcon\" />\n      </div>\n      {returnTopBarAppearance()}\n    </div>\n  );\n};\n\nexport default React.memo(TopBar);\n","import React, { useContext, useRef, useState } from \"react\";\r\n// import Draggable, { DraggableEvent, DraggableData } from \"react-draggable\";\r\nimport Draggable, { DraggableEvent, DraggableData } from \"react-draggable\";\r\nimport { CanvasContext, constants } from \"../SwitchView\";\r\nimport ConnectPointsWrapper from \"./ConnectPointsWrapper\";\r\nimport { matchFields } from \"./aclsFields\";\r\n\r\nimport { boxShapesType } from \"../SwitchView\";\r\nimport { fieldsNameType } from \"./aclsFields\";\r\n\r\nexport type BoxType = {\r\n  id: string;\r\n  shape?: boxShapesType;\r\n  ref?: React.MutableRefObject<any>;\r\n  x?: number;\r\n  y?: number;\r\n  clientX?: number;\r\n  clientY?: number;\r\n  name?: string;\r\n  flowDetailsModalOpen?: boolean;\r\n  visible?: boolean;\r\n};\r\n\r\nconst Box = (props: { box: BoxType; boxes: BoxType[] }) => {\r\n  // console.log(props.box);\r\n\r\n  const c = useContext(CanvasContext);\r\n  const { boxes, box } = props;\r\n  const [wasDragged, setWasDragged] = useState(false);\r\n\r\n  if (!box.shape) box.shape = \"modBox\";\r\n  if (!box.x) box.x = 0;\r\n  if (!box.y) box.y = 0;\r\n  const handleDrag = (e: DraggableEvent, data: DraggableData, id: string) => {\r\n    let newBoxes = [...boxes];\r\n    let i = boxes.findIndex((b) => b.id === id);\r\n    newBoxes[i].x = data.lastX;\r\n    newBoxes[i].y = data.lastY;\r\n    c.updateBoxOnUi(newBoxes[i]);\r\n  };\r\n\r\n  let background = c.chooseBoxBackground(box);\r\n\r\n  box.ref = useRef();\r\n  // const tmp = box.ref.current.get\r\n  if (box.ref.current) {\r\n    let { x, y } = box.ref.current.getBoundingClientRect();\r\n    box.clientX = x;\r\n    box.clientY = y;\r\n  }\r\n  // console.log(\"box render\");\r\n  if (box.name == null) box.name = box.id;\r\n\r\n  return (\r\n    <Draggable\r\n      bounds=\"#boxesContainer\"\r\n      onStart={(e) => e.stopPropagation()}\r\n      onDrag={(e, data) => {\r\n        handleDrag(e, data, box.id);\r\n      }}\r\n      onStop={(e, data) => handleDrag(e, data, box.id)}\r\n      position={{ x: box.x, y: box.y }}\r\n      grid={[constants.draggingGrid[0], constants.draggingGrid[1]]}\r\n    >\r\n      <div\r\n        ref={box.ref}\r\n        className={`${box.shape} hoverMarker absolute`}\r\n        style={{ background }}\r\n        onClick={(e) => {\r\n          if (wasDragged === false) c.handleBoxClick(e, box);\r\n          setWasDragged(false);\r\n        }}\r\n        id={box.id}\r\n        onDragOver={(e) => {\r\n          // console.log(\"box onDragOver!\");\r\n\r\n          e.stopPropagation();\r\n          e.preventDefault();\r\n        }}\r\n        onDrop={(e) => {\r\n          console.log(\"box on drop!\");\r\n          if (e.dataTransfer.getData(\"arrow\") !== box.id) {\r\n            c.addLine({ startBoxId: e.dataTransfer.getData(\"arrow\"), endBoxId: box.id });\r\n          }\r\n        }}\r\n        // onDragEnter={(e) => {\r\n        //   console.log(\"box onDragEnter!\");\r\n        //   if (e.dataTransfer.getData(\"arrow\") !== box.id) {\r\n        //     c.addLine({ startBoxId: e.dataTransfer.getData(\"arrow\"), endBoxId: box.id });\r\n        //   }\r\n        // }}\r\n      >\r\n        <div>{box.name}</div>\r\n        {/* <ConnectPointsWrapper element={box} setWasDragged={setWasDragged} /> */}\r\n        <ConnectPointsWrapper element={box} elemPos={{ x: box.clientX, y: box.clientY }} />\r\n      </div>\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default React.memo(Box);\r\n","import React from \"react\";\nimport { lineType } from \"./../SwitchView\";\nimport TopBar from \"./TopBar\";\nimport Box, { BoxType } from \"./Box\";\n\nconst BoxesContainer = ({\n  handleDropBox,\n  boxes,\n  lines,\n}: {\n  handleDropBox: (e: any) => void;\n  boxes: BoxType[];\n  lines: lineType[];\n}) => {\n  return (\n    <div\n      id=\"boxesContainer\"\n      className=\"boxesContainer\"\n      onDragOver={(e) => {\n        // let tmp = e.dataTransfer.getData(\"shape\");\n        // console.log(\"boxContainer onDragOver\");\n        e.stopPropagation();\n        e.preventDefault();\n      }}\n      onDrop={handleDropBox}\n    >\n      <TopBar />\n\n      {boxes.map((box) => (box.visible ? <Box key={box.id} {...({ box, boxes } as const)} /> : null))}\n    </div>\n  );\n};\n\nexport default BoxesContainer;\n","import React, { useState, createContext, useEffect, useCallback, useMemo, useRef } from \"react\";\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\nimport \"./SwitchView.css\";\nimport Box, { BoxType } from \"./components/Box\";\nimport TopBar, { actionsTypes } from \"./components/TopBar\";\nimport XarrowWrapper, { XarrowWrapperType } from \"./components/XarrowWrapper\";\nimport FlowDetailsModal from \"./modals/FlowDetailsModal\";\nimport { useParams, match } from \"react-router\";\nimport { proxyAddress, switchesType, portDetailsType } from \"../../App\";\nimport PortsBar from \"./components/PortsBar\";\nimport TestComponent from \"./components/TestComponent\";\nimport BounceLoader from \"react-spinners/BounceLoader\";\nimport SwitchDetailsModal from \"./modals/SwitchDetailsModal\";\nimport _, { random } from \"lodash\";\nimport { PortType } from \"./components/Port\";\nimport { xarrowPropsType } from \"react-xarrows\";\nimport { fieldsNameType } from \"./components/aclsFields\";\nimport ToolboxMenu from \"./components/ToolboxMenu\";\nimport BoxesContainer from \"./components/BoxesContainer\";\nimport { isEqual } from \"lodash\";\n// import { matchFieldsType, actionsFieldsType } from \"./components/aclsFields\";\n\n// import MaterialIcon from \"material-icons-react\";\n\n// const shapes = [\"wideBox\", \"tallBox\", \"portBox\"];\n\ntype CanvasContextType = {\n  setPorts: React.Dispatch<\n    React.SetStateAction<\n      {\n        shape: \"portBox\";\n        id: string;\n        name: string;\n        port: portDetailsType;\n        ref: any;\n      }[]\n    >\n  >;\n  // setBoxes: React.Dispatch<React.SetStateAction<BoxType[]>>;\n  updateBoxOnUi: (updatedBox: BoxType) => void;\n  updateFlowOnUi: (updatedFlow: flowEntryType) => void;\n  setLines: React.Dispatch<React.SetStateAction<any[]>>;\n  selected: selectedType<\"box\" | \"arrow\">;\n  setSelected: React.Dispatch<React.SetStateAction<selectedType>>;\n  actionState: actionsTypes;\n  setActionState: React.Dispatch<React.SetStateAction<actionsTypes>>;\n  handleBoxClick: (e: any, box: any) => void;\n  chooseBoxBackground: (box: any) => string;\n  addBox: (x: any, y: any, shape: any) => void;\n  addLine: ({ startBoxId, endBoxId }: { startBoxId: string; endBoxId: string }) => void;\n  removeSelectedBox: () => void;\n  addLineToSelectedBox: (box: any) => void;\n  removeSelectedLine: () => void;\n  openModsWindowOfSelected: () => void;\n  handleSelect: (e: any, box?: any) => void;\n  toggleFlowVisibility: (flow: any) => void;\n  toggleFlowVisibilityOfSelected: () => void;\n  delFlow: (flow: flowEntryType, callback?: () => void) => void;\n  addFlowToServer: (flow: flowEntryType, callback?: (updatedFlowDetails: flowEntryDetailsType) => void) => void;\n  updateFlowOnServer: (updatedFlow: flowEntryType, callback?: () => void) => void;\n  updateFlowName: (flowId: string, newName: string) => void;\n};\n\nexport const CanvasContext = createContext<CanvasContextType>(null);\nexport const constants = { draggingGrid: [1, 1] };\n\nexport const boxShapes = [\"modBox\"] as const;\n\nexport type boxShapesType = typeof boxShapes[number];\nexport type selectedType<t extends \"box\" | \"arrow\" = \"box\" | \"arrow\"> = t extends \"box\"\n  ? BoxType | PortType\n  : XarrowWrapperType;\n\nexport type serverSetFlowType = {\n  dpid?: number;\n  actions: { type: fieldsNameType<\"actions\">; port: number | string };\n  // actions: { type: fieldsNameType<\"actions\">; port: number | string }[];\n  byte_count?: number;\n  cookie?: number;\n  duration_nsec?: number;\n  duration_sec?: number;\n  flags?: number;\n  hard_timeout?: number;\n  idle_timeout?: number;\n  length?: number;\n  match: { [key in fieldsNameType<\"match\">]?: string };\n  packet_count?: number;\n  priority: number;\n  table_id?: number;\n};\n\nexport type serverGetFlowType = {\n  match: { [key in fieldsNameType<\"match\">]?: string };\n  actions: string[];\n  byte_count?: number;\n  cookie?: number;\n  duration_nsec?: number;\n  duration_sec?: number;\n  flags?: number;\n  hard_timeout?: number;\n  idle_timeout?: number;\n  length?: number;\n  packet_count?: number;\n  priority: number;\n  table_id?: number;\n};\n\nexport type flowEntryDetailsType = {\n  match?: { [key in fieldsNameType<\"match\">]?: string };\n  actions?: { [key in fieldsNameType<\"actions\">]?: string };\n  byte_count?: number;\n  cookie?: number;\n  duration_nsec?: number;\n  duration_sec?: number;\n  flags?: number;\n  hard_timeout?: number;\n  idle_timeout?: number;\n  length?: number;\n  packet_count?: number;\n  priority?: number;\n  table_id?: number;\n};\n\nexport type flowEntryType = {\n  details: flowEntryDetailsType;\n  // visible: boolean;\n  box: BoxType;\n  isSynced: boolean;\n};\n\nexport type switchSelfType = switchesType[string] & {\n  flowEntries: flowEntryType[];\n};\n\nexport type modXarrowPropsType = Omit<xarrowPropsType, \"start\" | \"end\"> & { start: string; end: string };\n\n// export type lineType = {\n//   // props: { [P in keyof xarrowPropsType]: xarrowPropsType[P] };\n//   props: modXarrowPropsType;\n// };\nexport type lineType = modXarrowPropsType;\n\nconst convertNumericStringsInObj2numbers = (obj: { [key: string]: any }): { [key: string]: any } => {\n  const newObj = { ...obj };\n  for (let key in obj) {\n    if (typeof obj[key] === \"string\") newObj[key] = isNaN(obj[key]) === false ? Number(obj[key]) : obj[key];\n  }\n  return newObj;\n};\nconst convertNumbersInObj2strings = (obj: { [key: string]: any }): { [key: string]: any } => {\n  const newObj = { ...obj };\n  for (let key in obj) {\n    if (typeof obj[key] === \"number\") newObj[key] = String(obj[key]);\n  }\n  return newObj;\n};\n\nconst convertActionsFromUI2ServerSet = (actions: flowEntryDetailsType[\"actions\"]): serverSetFlowType[\"actions\"] => {\n  // const result = actions.map(\n  //   (action) =>\n  //     (Object.keys(action) as Array<keyof typeof action>).reduce(\n  //       (acu, cu) => Object.assign(acu, { [cu]: action[cu] }),\n  //       {}\n  //     ) as serverSetFlowType[\"actions\"][number]\n  // );\n  // console.log(result);\n\n  // const result = actions.map((action) =>\n  //   (Object.keys(action) as Array<keyof typeof action>).map((acKey) => ({\n  //     type: acKey,\n  //     port: Number(action[acKey]) ? Number(action[acKey]) : action[acKey],\n  //   }))\n  // );\n\n  const result = (Object.keys(actions) as Array<keyof typeof actions>).map((ac) => ({\n    type: ac,\n    port: Number(actions[ac]) ? Number(actions[ac]) : actions[ac],\n  }));\n\n  // (Object.keys(actions) as Array<keyof typeof actions>).map((ac)\n  return result as any;\n};\n// (Object.keys(actions) as Array<keyof typeof actions>).map((ac) => ({\n//   type: ac,\n//   port: Number(actions[ac]) ? Number(actions[ac]) : actions[ac],\n// }));\n\nconst convertActionsFromServerGet2UI = (actions: serverGetFlowType[\"actions\"]): flowEntryDetailsType[\"actions\"] => {\n  // const actionsList = actions.map((ac) => ac.split(\":\")) as string[][];\n  // const actionsObjects = actionsList.map((ac) => ({ [ac[0]]: ac[1] }));\n  // console.log(actionsObjects);\n  // return actionsObjects;\n\n  const actionsUI = actions.map((ac) => ac.split(\":\")).reduce((acu, cu) => Object.assign(acu, { [cu[0]]: cu[1] }), {});\n  return actionsUI;\n\n  // return (Object.keys(actions) as Array<keyof typeof actions>).map((ac) => ({\n  //   type: ac,\n  //   port: Number(actions[ac]) ? Number(actions[ac]) : actions[ac],\n  // }));\n\n  // console.log(actions.map((ac) => ac.split(\":\")));\n};\n\nconst SwitchView = (props: { switches: switchesType }) => {\n  // console.log(props.switches);\n  const { dpid } = useParams<{ dpid: string }>();\n  const [switchSelf, setSwitchSelf] = useState<switchSelfType>({ ...props.switches[dpid], flowEntries: [], dpid });\n  const [ports, setPorts] = useState(\n    switchSelf.ports.map((p) => ({\n      shape: \"portBox\" as const,\n      id: p.port_no,\n      name: p.name,\n      port: p,\n      ref: null,\n    }))\n  );\n  // console.log(\"switchSelf\", switchSelf);\n  const [dataFetched, setDataFetched] = useState(false);\n\n  const [switchDetailsWindow, setSwitchDetailsWindow] = useState(false);\n\n  useEffect(() => {\n    fetchFlowsFromServer();\n  }, []);\n\n  const fetchFlowsFromServer = () => {\n    fetch(proxyAddress + \"http://localhost:8080/stats/flow/\" + dpid)\n      .then((res) => {\n        if (res.status !== 200) alert(res.status);\n        return res.json();\n      })\n      .then((result: { [dpid: string]: serverGetFlowType[] }) => {\n        console.log(result);\n        setDataFetched(true);\n        const boxesConSize = document.getElementById(\"boxesContainer\").getBoundingClientRect();\n        setSwitchSelf({\n          ...switchSelf,\n          flowEntries: result[dpid].map((f, i) => {\n            // initial position of boxes  is random for now\n            let x = boxesConSize.width * (0.2 + 0.8 * Math.random());\n            let y = boxesConSize.height * (0.2 + 0.8 * Math.random());\n            console.log(f);\n            return {\n              details: {\n                ...f,\n                actions: convertActionsFromServerGet2UI(f.actions) as any, // parse actions because server return different format then state in UI\n              },\n              visible: false,\n              isSynced: true,\n              box: {\n                x,\n                y,\n                visible: false,\n                id: JSON.stringify(f.match),\n                name: \"flow\" + i,\n              },\n            };\n          }),\n        });\n      });\n  };\n\n  const toggleFlowVisibility = useCallback(\n    (flow: flowEntryType) => {\n      flow.box.visible = !flow.box.visible;\n      updateFlowOnUi(flow);\n      // setSwitchSelf((switchSelf) => {\n      //   let newFlow = switchSelf.flowEntries.find((f) => {\n      //     return JSON.stringify(f.details.match) === JSON.stringify(flow.details.match);\n      //   });\n      //   newFlow.box.visible = !newFlow.box.visible;\n      //   return { ...switchSelf };\n      // });\n    },\n    [switchSelf]\n  );\n\n  const toggleFlowVisibilityOfSelected = () => {\n    toggleFlowVisibility(switchSelf.flowEntries.find((f) => f.box.id === selected.id));\n    // setSwitchSelf((switchSelf) => {\n    //   const newSwitchSelf = { ...switchSelf };\n    //   let newFlow = newSwitchSelf.flowEntries.find((f) => f.box.id === selected.id);\n    //   newFlow.box.visible = !newFlow.box.visible;\n    //   return newSwitchSelf;\n    // });\n  };\n\n  const [lines, setLines] = useState<lineType[]>([\n    // {\n    //   props: {\n    //     start: \"box1\",\n    //     end: \"box2\",\n    //     // endAnchor: \"middle\",\n    //     strokeWidth: 10,\n    //     label: {\n    //       middle: { text: \"clickMe!\", extra: { alignmentBaseline: \"text-after-edge\" } },\n    //     },\n    //   },\n    // },\n  ]);\n\n  const [selected, setSelected] = useState<selectedType>(null);\n  const [actionState, setActionState] = useState<actionsTypes>(\"Normal\");\n\n  const handleSelect = useCallback(\n    (e, box?) => {\n      if (e === null) {\n        setSelected(null);\n        setActionState(\"Normal\");\n      } else {\n        setSelected(box);\n      }\n    },\n    // [selected, actionState]\n    []\n  );\n\n  // const getBoxes = () => Object.values(switchSelf.flowEntries).map((f) => f.box);\n  const getBoxes = (mySwitchSelf: switchSelfType = null) => {\n    if (mySwitchSelf) return Object.values(mySwitchSelf.flowEntries).map((f) => f.box);\n    else return Object.values(switchSelf.flowEntries).map((f) => f.box);\n  };\n\n  // const setBoxes = () => {\n  //   return Object.keys(switchSelf.flowEntries).map(flow=>)\n  // }\n\n  const updateBoxOnUi = (updatedBox: BoxType) => {\n    setSwitchSelf((switchSelf) => {\n      const newSwitchSelf = { ...switchSelf };\n      let newFlow = newSwitchSelf.flowEntries.find((f) => f.box.id === updatedBox.id);\n      newFlow.box = updatedBox;\n      return newSwitchSelf;\n    });\n  };\n\n  const updateFlowOnUi = (updatedFlow: flowEntryType) => {\n    setSwitchSelf((switchSelf) => {\n      const newSwitchSelf = { ...switchSelf };\n      let i = newSwitchSelf.flowEntries.findIndex((f) => f.box.id === updatedFlow.box.id);\n      newSwitchSelf.flowEntries[i] = { ...updatedFlow };\n      return newSwitchSelf;\n    });\n  };\n\n  const updateFlowName = (id: string, newName: string) => {\n    const newFlow = switchSelf.flowEntries.find((f) => f.box.id === id);\n    newFlow.box.name = newName;\n    updateFlowOnUi(newFlow);\n  };\n\n  const checkExistence = useCallback(\n    (id) => {\n      return [...getBoxes(), ...ports].map((b) => b.id).includes(id);\n    },\n    [switchSelf, ports]\n  );\n\n  const addBox = useCallback(\n    (x, y, shape) => {\n      x -= x % constants.draggingGrid[0];\n      y -= y % constants.draggingGrid[1];\n      let l = getBoxes().length;\n      while (checkExistence(\"box\" + l)) l++;\n      var newName = prompt(\"Enter box name: \", \"box\" + l);\n      while (checkExistence(newName)) newName = prompt(\"name taken,choose other: \");\n      if (newName) {\n        let newFlow: flowEntryType = {\n          isSynced: false,\n          details: {},\n          // visible: true,\n          box: { id: newName, x, y, shape, flowDetailsModalOpen: true, visible: true },\n        };\n        // setBoxes([...boxes, newBox]);\n        setSwitchSelf((switchSelf) => {\n          const newSwitchSelf = { ...switchSelf };\n          newSwitchSelf.flowEntries = newSwitchSelf.flowEntries.concat(newFlow);\n          return newSwitchSelf;\n        });\n      }\n    },\n    [switchSelf.flowEntries.length, JSON.stringify(getBoxes().map((b) => b.flowDetailsModalOpen))]\n  );\n\n  const handleDropBox = useCallback(\n    (e) => {\n      let shape = e.dataTransfer.getData(\"shape\");\n      if (boxShapes.includes(shape)) {\n        let { x, y } = e.target.getBoundingClientRect();\n        x = e.clientX - x;\n        y = e.clientY - y;\n        addBox(x, y, shape);\n      }\n    },\n    [getBoxes().length, JSON.stringify(getBoxes().map((b) => b.flowDetailsModalOpen)), selected, addBox]\n  );\n\n  const handleBoxClick = useCallback(\n    (e, box) => {\n      e.stopPropagation(); //so only the click event on the box will fire on not on the container itself\n      if (actionState === \"Normal\") {\n        handleSelect(e, box);\n      } else if (actionState === \"Add Connections\" && selected.id !== box.id && !box.id.includes(\":<input>\")) {\n        addLineToSelectedBox(box);\n      } else if (actionState === \"Remove Connections\") {\n        setLines((lines) => lines.filter((line) => !(line.start === selected.id && line.end === box.id)));\n      }\n    },\n    [actionState, selected]\n  );\n\n  const chooseBoxBackground = useCallback(\n    (box) => {\n      let background = null;\n      if (selected && selected.id === box.id) {\n        background = \"rgb(200, 200, 200)\";\n      } else if (\n        (actionState === \"Add Connections\" &&\n          lines.filter((line) => line.start === selected.id && line.end === box.id).length === 0 &&\n          !box.id.includes(\":<input>\")) ||\n        (actionState === \"Remove Connections\" &&\n          lines.filter((line) => line.start === selected.id && line.end === box.id).length > 0)\n      ) {\n        background = \"LemonChiffon\";\n      }\n      return background;\n    },\n    [actionState, selected]\n  );\n\n  const addLine = useCallback(\n    ({ startBoxId, endBoxId }: { startBoxId: string; endBoxId: string }) => {\n      // const flowToUpdate = switchSelf.flowEntries.find((f) => f.box.id === startBoxId);\n      // updateFlowOnServer();\n\n      const inputFlow = switchSelf.flowEntries.find((f) => f.box.id === startBoxId);\n      const outputFlow = switchSelf.flowEntries.find((f) => f.box.id === endBoxId);\n      if (inputFlow) {\n        inputFlow.details.actions[\"OUTPUT\"] = endBoxId.replace(\":<output>\", \"\");\n        updateFlow(inputFlow);\n        // inputFlow.isSynced ? updateFlow(inputFlow) : updateFlowOnUi(inputFlow);\n      }\n      if (outputFlow) {\n        outputFlow.details.match[\"in_port\"] = startBoxId.replace(\":<input>\", \"\");\n        updateFlow(outputFlow);\n        // outputFlow.isSynced ? updateFlow(outputFlow) : updateFlowOnUi(outputFlow);\n      }\n      // }\n      // add line from selected box to passed 'box'\n      //   setLines((lines) => [\n      //     ...lines,\n      //     {\n      //       start: startBoxId,\n      //       end: endBoxId,\n      //     },\n      //   ]);\n    },\n    [switchSelf, selected]\n  );\n\n  const removeSelectedBox = useCallback(() => {\n    delFlow(switchSelf.flowEntries.find((f) => f.box.id === selected.id));\n  }, [switchSelf, selected]);\n\n  const addLineToSelectedBox = useCallback(\n    (box: BoxType) => {\n      addLine({ startBoxId: (selected as BoxType).id, endBoxId: box.id });\n      // setLines((lines) => [\n      //   ...lines,\n      //   {\n      //     start: selected.id as string,\n      //     end: box.id,\n      //   },\n      // ]);\n    },\n    [lines.length, selected]\n  );\n\n  const removeLine = (lineId: XarrowWrapperType[\"id\"]) => {\n    const inputFlow = switchSelf.flowEntries.find((f) => f.box.id === lineId.start);\n    const outputFlow = switchSelf.flowEntries.find((f) => f.box.id === lineId.end);\n    if (inputFlow) {\n      delete inputFlow.details.actions[\"OUTPUT\"];\n      updateFlow({ ...inputFlow });\n    }\n    if (outputFlow) {\n      delete outputFlow.details.match[\"in_port\"];\n      updateFlow({ ...outputFlow });\n    }\n  };\n\n  const removeSelectedLine = useCallback(() => {\n    removeLine((selected as selectedType<\"arrow\">).id);\n  }, [switchSelf, selected]);\n\n  const removeConnectedLines = (boxId: string) => {\n    lines\n      .filter((line) => !(line.start === boxId || line.end === boxId))\n      .forEach((line) => removeLine({ start: line.start, end: line.end }));\n  };\n\n  const openModsWindowOfSelected = useCallback(() => {\n    setSwitchSelf((switchSelf) => {\n      const newSwitchSelf = { ...switchSelf };\n      const newBox = getBoxes().find((box) => box.id === selected.id);\n      newBox.flowDetailsModalOpen = true;\n      return newSwitchSelf;\n    });\n  }, [selected]);\n\n  // (Object.keys(actions) as Array<keyof typeof actions>).map((ac) => ({\n  //   type: ac,\n  //   port: Number(actions[ac]),\n  // }));\n\n  const delFlowFromUI = (flow: flowEntryType) => {\n    removeConnectedLines(flow.box.id);\n    setSwitchSelf((switchSelf) => {\n      const newSw = { ...switchSelf };\n      const i = newSw.flowEntries.findIndex((f) => _.isEqual(f, flow));\n      newSw.flowEntries = newSw.flowEntries.filter((f) => !_.isEqual(f, flow));\n      return newSw;\n    });\n    handleSelect(null);\n  };\n\n  const delFlowFromServer = (flow: flowEntryType, callback?: () => void) => {\n    const parsedActions = convertActionsFromUI2ServerSet(flow.details.actions);\n    const reqBody = { ...flow.details, dpid: Number(switchSelf.dpid), actions: parsedActions };\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(reqBody),\n    };\n    fetch(proxyAddress + \"http://localhost:8080/stats/flowentry/delete_strict\", requestOptions).then((response) => {\n      if (response.status !== 200) alert(response.status);\n      else {\n        if (callback) callback();\n      }\n    });\n  };\n\n  const delFlow = useCallback(\n    (flow: flowEntryType) => {\n      const confirm = window.confirm(`are you sure you want to delete ${flow.box.name}?`);\n      if (confirm === false) return;\n      if (flow.isSynced === false) return delFlowFromUI(flow);\n      delFlowFromServer(flow, () => delFlowFromUI(flow));\n    },\n    [switchSelf]\n  );\n\n  const checkFlowExistence = (flowMatch: flowEntryType[\"details\"][\"match\"]) =>\n    switchSelf.flowEntries.find(\n      (f) => JSON.stringify(f.details.match) === JSON.stringify(convertNumericStringsInObj2numbers(flowMatch))\n    );\n\n  const getFlowDetailsFromServer = (\n    flowMatch: flowEntryDetailsType[\"match\"],\n    callback?: (flowsDetails: flowEntryDetailsType) => void\n  ) => {\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ match: flowMatch }),\n    };\n    fetch(proxyAddress + \"http://localhost:8080/stats/flow/\" + dpid, requestOptions)\n      .then((response) => {\n        if (response.status !== 200) alert(response.status);\n        else return response.json();\n      })\n      .then((flowDetails: { [dpid: number]: serverGetFlowType[] }) => {\n        const serverFlowDetails = flowDetails[Number(dpid)][0];\n        // console.log(flowDetails[Number(dpid)]);\n        callback({\n          ...serverFlowDetails,\n          match: convertNumbersInObj2strings(serverFlowDetails.match),\n          actions: convertActionsFromServerGet2UI(serverFlowDetails.actions),\n        });\n      });\n  };\n\n  const addFlowToServer = useCallback(\n    (flow: flowEntryType, callback?: (updatedFlowDetails: flowEntryDetailsType) => void) => {\n      const { match = {}, actions = {}, priority = 1 } = flow.details;\n      const flowExist = checkFlowExistence(match);\n      console.log(match);\n      if (flowExist) {\n        alert(\n          \"the flow \" +\n            flowExist.box.name +\n            \" with the same match rule already exist.\\nFlows with same match rules are not allowed.\"\n        );\n        return;\n      }\n      const parsedActions = convertActionsFromUI2ServerSet(actions);\n      const reqBody: serverSetFlowType = {\n        ...flow.details,\n        match,\n        actions: parsedActions,\n        priority,\n        dpid: Number(switchSelf.dpid),\n      };\n      const requestOptions = {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(reqBody),\n      };\n      fetch(proxyAddress + \"http://localhost:8080/stats/flowentry/add\", requestOptions).then((response) => {\n        if (response.status !== 200) alert(response.status);\n        else {\n          //retrieve all details of flow from server because some of the details may be set by the server\n          getFlowDetailsFromServer(match, (flowDetails) => {\n            if (isEqual(flowDetails.match, flow.details.match) === false) {\n              delFlowFromServer(flow);\n              const conflictedFlow = switchSelf.flowEntries.find((f) => isEqual(f.details.match, flowDetails.match));\n              const name = conflictedFlow.box.name;\n              alert(\n                \"match rule conflicts with flow \" +\n                  name +\n                  \".(means that the \" +\n                  JSON.stringify(flow.details.match) +\n                  \" rule also match the match rule of \" +\n                  name +\n                  \")\\nPlease provide more detailed match rule.\"\n              );\n              return;\n            }\n            const updatedFlow = {\n              ...flow,\n              details: {\n                ...flowDetails, //server respond with list of matching flows but we know there is a single flow matching to single match rule\n              },\n              isSynced: true,\n            };\n            updateFlowOnUi(updatedFlow);\n            if (callback) callback(updatedFlow.details);\n          });\n        }\n      });\n    },\n    [switchSelf]\n  );\n\n  /**\n   * will update a flow entry on vSwitch based on matching wildcards.\n   * if successful response will update the UI as well.\n   * @param updatedFlow - the flow to update details on server\n   * @param callback    - callback function that will be called after receive success code(200) from server\n   *\n   * @see https://ryu.readthedocs.io/en/latest/app/ofctl_rest.html#modify-flow-entry-strictly\n   */\n  const updateFlow = (updatedFlow: flowEntryType) => {\n    updateFlowOnServer(updatedFlow, () => updateFlowOnUi(updatedFlow));\n  };\n\n  const updateFlowOnServer = (updatedFlow: flowEntryType, callback?: () => void) => {\n    const parsedActions = convertActionsFromUI2ServerSet(updatedFlow.details.actions);\n    const reqBody: Partial<serverSetFlowType> = {\n      ...updatedFlow.details,\n      actions: parsedActions,\n      dpid: Number(switchSelf.dpid),\n    };\n    const requestOptions = {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(reqBody),\n    };\n    fetch(proxyAddress + \"http://localhost:8080/stats/flowentry/modify_strict\", requestOptions).then((response) => {\n      if (response.status !== 200) alert(response.status);\n      else {\n        if (callback) callback();\n      }\n    });\n  };\n\n  const canvasProps = useMemo(\n    () => ({\n      setPorts,\n      // setBoxes,\n      updateBoxOnUi,\n      setLines,\n      selected,\n      setSelected,\n      actionState,\n      setActionState,\n      handleBoxClick,\n      chooseBoxBackground,\n      addBox,\n      addLine,\n      removeSelectedBox,\n      addLineToSelectedBox,\n      removeSelectedLine,\n      openModsWindowOfSelected,\n      handleSelect,\n      toggleFlowVisibility,\n      toggleFlowVisibilityOfSelected,\n      delFlow,\n      addFlowToServer,\n      updateFlowOnUi,\n      updateFlowOnServer: updateFlow,\n      updateFlowName,\n    }),\n    [\n      setPorts,\n      // setBoxes,\n      updateBoxOnUi,\n      setLines,\n      selected,\n      setSelected,\n      actionState,\n      setActionState,\n      handleBoxClick,\n      chooseBoxBackground,\n      addBox,\n      addLine,\n      removeSelectedBox,\n      addLineToSelectedBox,\n      removeSelectedLine,\n      openModsWindowOfSelected,\n      handleSelect,\n      toggleFlowVisibility,\n      toggleFlowVisibilityOfSelected,\n      delFlow,\n      updateFlowOnUi,\n      addFlowToServer,\n      updateFlow,\n      updateFlowName,\n    ]\n  );\n\n  // console.log(\"SwitchView rendered\", switchSelf.flowEntries);\n\n  // const drawFlowLines = (f) =>{\n\n  // }\n\n  return (\n    <div>\n      <div className=\"canvasStyle\" id=\"canvas\" onClick={() => handleSelect(null)}>\n        {dataFetched ? (\n          <CanvasContext.Provider value={canvasProps}>\n            <TestComponent {...{ canvasProps }} />\n\n            <div className=\"switchTopBar\">\n              <div className=\"switchTitle\">{switchSelf.name}</div>\n              <InfoOutlinedIcon\n                fontSize={\"large\"}\n                // color=\"black\"\n                className=\"infoButton\"\n                onClick={() => setSwitchDetailsWindow(!switchDetailsWindow)}\n              />\n            </div>\n            <div className=\"innerCanvas\">\n              <ToolboxMenu />\n              <PortsBar {...{ ports, portPolarity: \"input\", lines }} />\n              <BoxesContainer {...{ boxes: getBoxes(), handleDropBox, lines }} />\n              <PortsBar {...{ ports, portPolarity: \"output\" }} />\n              {/* xarrow connections*/}\n\n              {/* {lines.map((line, i) => (\n                <XarrowWrapper key={line.start + \"-\" + line.end + i} {...{ line, selected }} />\n              ))} */}\n              {/* draw connections */}\n              {switchSelf.flowEntries.map((f) =>\n                f.box.visible ? (\n                  <React.Fragment key={f.box.id}>\n                    {f.details.match && f.details.match.in_port ? (\n                      <XarrowWrapper line={{ start: f.details.match.in_port + \":<input>\", end: f.box.id }} />\n                    ) : null}\n                    {f.details.actions &&\n                    (isNaN(f.details.actions.OUTPUT as any) === false || f.details.actions.OUTPUT === \"LOCAL\") ? (\n                      <XarrowWrapper line={{ start: f.box.id, end: f.details.actions.OUTPUT + \":<output>\" }} />\n                    ) : null}\n                  </React.Fragment>\n                ) : null\n              )}\n              {/* boxes menu that may be opened */}\n              {switchSelf.flowEntries.map((f) => {\n                return f.box.flowDetailsModalOpen ? <FlowDetailsModal key={f.box.id} {...{ flow: f }} /> : null;\n              })}\n            </div>\n            {switchDetailsWindow ? (\n              <SwitchDetailsModal {...{ setSwitchDetailsWindow, flowEntries: switchSelf.flowEntries }} />\n            ) : null}\n          </CanvasContext.Provider>\n        ) : (\n          <div className=\"mainWindow\">\n            <h3>fetching switch data...</h3>\n            <BounceLoader size={150} color={\"#123abc\"} loading={true} />\n          </div>\n        )}\n      </div>\n      {/* {console.log(\"//////////////////////////////////////////////////////\")} */}\n    </div>\n  );\n};\nexport default SwitchView;\n// export default DragDropContext(HTML5Backend)(SwitchView);\n","import React from \"react\";\nimport \"./SwitchesPage.css\";\nimport { Link } from \"react-router-dom\";\nimport { switchesType } from \"../../App\";\n\nconst SwitchesPage = ({ switches }: { switches: switchesType }) => {\n  return (\n    <div className=\"mainWindow\">\n      <React.Fragment>\n        <div className=\"switchListTitle\">\n          {Object.keys(switches).length > 0 ? \"Detected vSwitches:\" : \"No Detected vSwitches.\"}\n        </div>\n        {Object.keys(switches).map((dpid) => {\n          let { ports, name } = switches[dpid];\n          return (\n            <Link to={\"/switch/\" + dpid} key={dpid} className=\"switchList\">\n              {`${name} (dpid=${dpid} ports=${ports.map((p) => p.name).toString()})`}\n            </Link>\n          );\n        })}\n      </React.Fragment>\n    </div>\n  );\n};\n\nexport default SwitchesPage;\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport SwitchView from \"./pages/SwitchView/SwitchView\";\r\nimport SwitchesPage from \"./pages/switches/SwitchesPage\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport BounceLoader from \"react-spinners/BounceLoader\";\r\nimport { Container } from \"@material-ui/core\";\r\n\r\nexport const proxyAddress = \"http://localhost:9089/\";\r\n// in production proxyAddress should be '' !\r\n\r\nexport type portDetailsType = {\r\n  advertised: number;\r\n  config: number;\r\n  curr: number;\r\n  curr_speed: number;\r\n  hw_addr: string;\r\n  max_speed: number;\r\n  name: string;\r\n  peer: number;\r\n  port_no: string;\r\n  state: number;\r\n  supported: number;\r\n};\r\n\r\nexport type switchesType = {\r\n  [dpid: string]: {\r\n    ports: portDetailsType[];\r\n    name: string;\r\n    dpid?: string;\r\n  };\r\n};\r\n\r\nconst App = () => {\r\n  const [dataFetched, setDataFetched] = useState(false);\r\n  const [switches, setSwitches] = useState<switchesType>({});\r\n  const [connectFailed, setConnectFailed] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let switches: { [dpid: string]: portDetailsType[] } = {};\r\n    fetch(proxyAddress + \"http://localhost:8080/stats/switches\")\r\n      .then((res) => res.json())\r\n      .then(\r\n        (switchesDpids: string[]) => {\r\n          const promises = switchesDpids.map((dpid) => {\r\n            return fetch(proxyAddress + \"http://localhost:8080/stats/portdesc/\" + dpid)\r\n              .then((res) => res.json())\r\n              .then(\r\n                (ports) => {\r\n                  switches = Object.assign(switches, ports);\r\n                },\r\n                (error) => {\r\n                  throw error;\r\n                }\r\n              );\r\n          });\r\n          Promise.all(promises).then(() => {\r\n            let parsed_switches: switchesType = {};\r\n            for (let dpid in switches) {\r\n              for (let i = 0; i < switches[dpid].length; i++) {\r\n                if (switches[dpid][i].port_no === \"LOCAL\") {\r\n                  parsed_switches[dpid] = Object.assign({ ports: switches[dpid] }, { name: switches[dpid][i].name });\r\n                }\r\n              }\r\n            }\r\n            setSwitches(parsed_switches);\r\n            setDataFetched(true);\r\n          });\r\n        },\r\n        (error) => {\r\n          setConnectFailed(true);\r\n          throw error;\r\n        }\r\n      );\r\n  }, []);\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <header className=\"mainTitle\">SDN Manager</header>\r\n      <hr />\r\n      {dataFetched ? (\r\n        <Router>\r\n          <Switch>\r\n            <Route exact path=\"/\">\r\n              <SwitchesPage switches={switches} />\r\n            </Route>\r\n            <Route path=\"/switch/:dpid\">\r\n              <SwitchView switches={switches} />\r\n            </Route>\r\n            <Route path=\"*\">\r\n              <div className=\"mainWindow\">\r\n                <h3>404 Not Found</h3>\r\n              </div>\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      ) : (\r\n        <div className=\"mainWindow\">\r\n          {connectFailed ? (\r\n            <h3>\r\n              Can't connect to controller, or to ofctl_rest API at port 8080.\r\n              <br />\r\n              (or in development - check proxy server is running)\r\n            </h3>\r\n          ) : (\r\n            <div>\r\n              <h3>fetching switches...</h3>\r\n              <BounceLoader size={150} color={\"#123abc\"} loading={true} />\r\n            </div>\r\n          )}\r\n        </div>\r\n      )}\r\n      <div style={{ marginTop: 30 }}></div>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}