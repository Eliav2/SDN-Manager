{"version":3,"sources":["pages/SwitchView/components/XarrowWrapper.tsx","pages/SwitchView/components/aclsFields.tsx","pages/SwitchView/modals/FlowDetailsModal/PopUpMenu.tsx","pages/SwitchView/modals/FlowDetailsModal/InputField.tsx","pages/SwitchView/modals/FlowDetailsModal/SectionMenu.tsx","pages/SwitchView/modals/FlowDetailsModal/FlowDetailsModal.tsx","pages/SwitchView/components/ConnectPointsWrapper.tsx","pages/SwitchView/components/Port.tsx","pages/SwitchView/components/PortsBar.tsx","pages/SwitchView/components/TestComponent.jsx","pages/SwitchView/modals/SwitchDetailsModal/FlowDetails.tsx","pages/SwitchView/modals/SwitchDetailsModal/SwitchDetailsModal.tsx","pages/SwitchView/components/ToolboxMenu.tsx","pages/SwitchView/components/TopBar.tsx","pages/SwitchView/components/Box.tsx","pages/SwitchView/components/BoxesContainer.tsx","utils/serverRequests.tsx","components/ServerError.tsx","components/Loading.tsx","components/MainWindow.tsx","pages/SwitchView/SwitchView.tsx","pages/SwitchesPage/SwitchesPage.tsx","pages/LoginPage.tsx","App.tsx","index.jsx"],"names":["React","memo","line","c","useContext","CanvasContext","useState","color","state","setState","defProps","consoleWarning","passProps","onMouseEnter","onMouseLeave","onClick","e","stopPropagation","setSelected","id","start","end","shape","setActionState","cursor","startAnchor","includes","endAnchor","selected","matchFields","actionsFields","handleAddField","fields","secName","filterField","setFilterField","filter","f","trigger","className","fontSize","position","on","closeOnDocumentClick","mouseLeaveDelay","mouseEnterDelay","contentStyle","border","width","transition","arrow","value","type","style","placeholder","onChange","target","map","field","key","name","handleDelField","handleSaveFieldChange","onMouseDown","TextField","titleAccess","sectionName","details","setDetails","newDetails","Object","assign","PopUpMenu","keys","InputField","flow","match","matchDetails","setMatchDetails","actions","actionsDetails","setActionsDetails","priority","setPriority","modDetails","handleSaveChanges","flowDetails","updatedFlow","isSynced","box","flowDetailsModalOpen","updateFlowOnServer","enableUserSelectHack","defaultPosition","x","y","display","alignSelf","isEqual","updateBoxOnUi","addFlowToServer","callback","InputBase","defaultValue","inputProps","textAlign","updateFlowName","Grid","container","justify","label","Number","margin","SectionMenu","connectPointStyle","height","borderRadius","background","connectPointOffset","left","top","transform","right","bottom","ConnectPoint","element","handler","elemPos","ref1","useRef","setPosition","beingDragged","setBeingDragged","Fragment","zIndex","draggable","onDragStart","handleBoxClick","dataTransfer","setData","onDrag","clientX","clientY","opacity","ref","onDragEnd","handleSelect","advanced","divContainer","ConnectPointsWrapper","handlers","port","portPolarity","lines","wasDragged","setWasDragged","chooseBoxBackground","Tooltip","interactive","enterDelay","title","detail","i","marginBottom","onDragOver","preventDefault","onDrop","getData","addLine","startBoxId","endBoxId","hw_addr","slice","port_no","ports","props","flowEntry","visible","undefined","k","detailKey","toggleFlowVisibility","flex","matchKey","JSON","stringify","delFlow","setSwitchDetailsWindow","flowEntries","FlowDetails","ToolboxMenu","boxShapes","shapeName","modBox","portBox","portBoxOut","allowedActions","actionState","action","removeSelectedLine","openModsWindowOfSelected","toggleFlowVisibilityOfSelected","removeSelectedBox","handleEditAction","returnTopBarAppearance","boxes","handleDrag","data","newBoxes","findIndex","b","lastX","lastY","current","getBoundingClientRect","bounds","onStart","onStop","grid","constants","draggingGrid","console","log","BoxesContainer","handleDropBox","getSwitchWithPortDescription","url","dpid","onSuccess","onError","fetch","then","res","json","switchPorts","error","getPortDescription","parsed_switch","length","getAllSwitchesWithPortDescription","switches","ok","message","statusText","switchesDpids","getListOfSwitchesDpids","promises","switche","Promise","all","convertActionsFromUI2ServerPost","ac","convertNumericStringsInObj2numbers","obj","newObj","isNaN","convertNumbersInObj2strings","String","convertFlowServerGet2UI","split","reduce","acu","cu","convertFlowUI2serverPost","addFlowToSwitch","serverPostFlow","reqBody","requestOptions","method","headers","body","response","status","alert","flowMatch","getFilteredFlowsFromSwitch","flows","find","isMatch","fetchFailed","stack","size","loading","useStyles","makeStyles","mainWindow","flexDirection","minHeight","justifyContent","alignItems","padding","innerContent","flexWrap","children","isLoading","classes","comp","ServerError","Loading","Fade","in","timeout","mountOnEnter","unmountOnExit","marginTop","createContext","SwitchView","ofctlRestUrl","sDpid","useParams","switchSelf","setSwitchSelf","setPorts","switchDetailsWindow","setIsLoading","setFetchFailed","useEffect","fetchSwitchFromServer","fetchFlowsFromServer","initPorts","result","getFlowsOfSwitch","document","getElementById","newSwitchSelf","initFlows","portsDetails","p","flowsDetails","boxesConSize","Math","random","useCallback","updateFlowOnUi","setLines","getBoxes","mySwitchSelf","values","updatedBox","newName","newFlow","checkExistence","addBox","l","prompt","concat","addLineToSelectedBox","inputFlow","outputFlow","replace","updateFlow","removeLine","lineId","delFlowFromUI","boxId","forEach","newSw","_","delFlowFromServer","parsedActions","removeFlowFromSwitch","window","confirm","flowExist","boxID","flowToDelete","canvasProps","useMemo","MainWindow","Provider","PortsBar","in_port","OUTPUT","FlowDetailsModal","SwitchDetailsModal","SwitchesPage","setSwitches","to","toString","theme","root","spacing","direction","loginButton","linkDiv","link","setOfctlRestUrl","history","useHistory","setUrl","noValidate","autoComplete","onSubmit","push","variant","Button","App","proxyAddress","Container","maxWidth","path","exact","LoginPage","rootElement","render"],"mappings":"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","file":"static/js/main.3c9086d5.chunk.js","sourcesContent":["import React, { useState, useContext } from \"react\";\nimport Xarrow, { xarrowPropsType } from \"react-xarrows\";\nimport { CanvasContext, lineType, selectedType } from \"../SwitchView\";\n\n//{props: {line, setSelected, selected}}\n\ntype Optional<T> = { [P in keyof T]?: T[P] };\ntype Required<T> = { [K in keyof T]?: T[K] };\n\nexport type XarrowWrapperType = {\n  id: { start: string; end: string };\n  shape?: \"arrow\";\n};\n\nconst XarrowWrapper = ({ line }: { line: lineType }) => {\n  const c = useContext(CanvasContext);\n\n  const [state, setState] = useState({ color: line.color });\n  // console.log(props);\n  // console.log(\"Xarrow renderd\");\n\n  const defProps: Optional<xarrowPropsType> = {\n    consoleWarning: false,\n    passProps: {\n      onMouseEnter: () => setState({ color: \"IndianRed\" }),\n      onMouseLeave: () => setState({ color: line.color }),\n      onClick: (e) => {\n        e.stopPropagation(); //so only the click event on the arrow will fire on not on the conainer itself\n        c.setSelected({\n          id: { start: line.start as string, end: line.end as string },\n          shape: \"arrow\",\n        });\n        c.setActionState(\"Normal\");\n      },\n      cursor: \"pointer\",\n    },\n  };\n  let color = state.color;\n  let startAnchor = (line.start as string).includes(\":<input>\") ? (\"right\" as const) : (\"auto\" as const);\n  let endAnchor = (line.end as string).includes(\":<output>\") ? (\"left\" as const) : (\"auto\" as const);\n  if (\n    c.selected &&\n    c.selected.shape === \"arrow\" &&\n    c.selected.id.start === line.start &&\n    c.selected.id.end === line.end\n  ) {\n    color = \"red\";\n  }\n  return <Xarrow startAnchor={startAnchor} endAnchor={endAnchor} {...{ ...defProps, ...line, ...state, color }} />;\n};\n\nexport default React.memo(XarrowWrapper, () => false);\n","// export const matchFields = [\n//   [\"in_port\", \"Integer 32bit\", \"Switch input port\"],\n//   [\"in_phy_port\", \"Integer 32bit\", \"Switch physical input port\"],\n//   [\"metadata\", \"Integer 64bit\", \"Metadata passed between tables\"],\n//   [\"eth_dst\", \"MAC address\", \"Ethernet destination address\"],\n//   [\"eth_src\", \"MAC address\", \"Ethernet source address\"],\n//   [\"eth_type\", \"Integer 16bit\", \"Ethernet frame type\"],\n//   [\"vlan_vid\", \"Integer 16bit\", \"VLAN id\"],\n//   [\"vlan_pcp\", \"Integer 8bit\", \"VLAN priority\"],\n//   [\"ip_dscp\", \"Integer 8bit\", \"IP DSCP (6 bits in ToS field)\"],\n//   [\"ip_ecn\", \"Integer 8bit\", \"IP ECN (2 bits in ToS field)\"],\n//   [\"ip_proto\", \"Integer 8bit\", \"IP protocol\"],\n//   [\"ipv4_src\", \"IPv4 address\", \"IPv4 source address\"],\n//   [\"ipv4_dst\", \"IPv4 address\", \"IPv4 destination address\"],\n//   [\"tcp_src\", \"Integer 16bit\", \"TCP source port\"],\n//   [\"tcp_dst\", \"Integer 16bit\", \"TCP destination port\"],\n//   [\"udp_src\", \"Integer 16bit\", \"UDP source port\"],\n//   [\"udp_dst\", \"Integer 16bit\", \"UDP destination port\"],\n//   [\"sctp_src\", \"Integer 16bit\", \"SCTP source port\"],\n//   [\"sctp_dst\", \"Integer 16bit\", \"SCTP destination port\"],\n//   [\"icmpv4_type\", \"Integer 8bit\", \"ICMP type\"],\n//   [\"icmpv4_code\", \"Integer 8bit\", \"ICMP code\"],\n//   [\"arp_op\", \"Integer 16bit\", \"ARP opcode\"],\n//   [\"arp_spa\", \"IPv4 address\", \"ARP source IPv4 address\"],\n//   [\"arp_tpa\", \"IPv4 address\", \"ARP target IPv4 address\"],\n//   [\"arp_sha\", \"MAC address\", \"ARP source hardware address\"],\n//   [\"arp_tha\", \"MAC address\", \"ARP target hardware address\"],\n//   [\"ipv6_src\", \"IPv6 address\", \"IPv6 source address\"],\n//   [\"ipv6_dst\", \"IPv6 address\", \"IPv6 destination address\"],\n//   [\"ipv6_flabel\", \"Integer 32bit\", \"IPv6 Flow Label\"],\n//   [\"icmpv6_type\", \"Integer 8bit\", \"ICMPv6 type\"],\n//   [\"icmpv6_code\", \"Integer 8bit\", \"ICMPv6 code\"],\n//   [\"ipv6_nd_target\", \"IPv6 address\", \"Target address for ND\"],\n//   [\"ipv6_nd_sll\", \"MAC address\", \"Source link-layer for ND\"],\n//   [\"ipv6_nd_tll\", \"MAC address\", \"Target link-layer for ND\"],\n//   [\"mpls_label\", \"Integer 32bit\", \"MPLS label\"],\n//   [\"mpls_tc\", \"Integer 8bit\", \"MPLS TC\"],\n//   [\"mpls_bos\", \"Integer 8bit\", \"MPLS BoS bit\"],\n//   [\"pbb_isid\", \"Integer 24bit\", \"PBB I-SID\"],\n//   [\"tunnel_id\", \"Integer 64bit\", \"Logical Port Metadata\"],\n//   [\"ipv6_exthdr\", \"Integer 16bit\", \"IPv6 Extension Header pseudo-field\"],\n//   [\"pbb_uca\", \"Integer 8bit\", \"PBB UCA header field (EXT-256 Old version of ONF Extension)\"],\n//   [\"tcp_flags\", \"Integer 16bit\", \"TCP flags (EXT-109 ONF Extension)\"],\n//   [\"actset_output\", \"Integer 32bit\", \"Output port from action set metadata (EXT-233 ONF Extension)\"],\n\nimport { BoxType } from \"./Box\";\n\n// ];\nexport const matchFields = [\n  [\"in_port\", \"Switch input port (int)\", '{\"in_port\": 7}'],\n  [\"in_phy_port\", \"Switch physical input port (int)\", '{\"in_phy_port\": 5, \"in_port\": 3}'],\n  [\n    \"metadata\",\n    \"Metadata passed between tables (int or string)\",\n    '{\"metadata\": 12345} or {\"metadata\": \"0x1212/0xffff\"}',\n  ],\n  [\"eth_src\", \"Ethernet source address (string)\", '{\"eth_src\": \"aa:bb:cc:11:22:33\"}'],\n  [\"dl_src\", \"Ethernet source address (string)\", '{\"eth_src\": \"aa:bb:cc:11:22:33\"}'],\n  [\"eth_dst\", \"Ethernet destination address (string)\", '{\"eth_dst\": \"aa:bb:cc:11:22:33/00:00:00:00:ff:ff\"}'],\n  [\"dl_dst\", \"Ethernet destination address (string)\", '{\"eth_dst\": \"aa:bb:cc:11:22:33/00:00:00:00:ff:ff\"}'],\n  [\"eth_type\", \"Ethernet frame type (int)\", '{\"eth_type\": 2048}'],\n  [\"dl_type\", \"Ethernet frame type (int)\", '{\"eth_type\": 2048}'],\n  [\"vlan_vid\", \"VLAN id (int or string)\", \"See Example of VLAN ID match field\"],\n  [\"vlan_pcp\", \"VLAN priority (int)\", '{\"vlan_pcp\": 3, \"vlan_vid\": 3}'],\n  [\"ip_dscp\", \"IP DSCP (6 bits in ToS field) (int)\", '{\"ip_dscp\": 3, \"eth_type\": 2048}'],\n  [\"ip_ecn\", \"IP ECN (2 bits in ToS field) (int)\", '{\"ip_ecn\": 0, \"eth_type\": 34525}'],\n  [\"ip_proto\", \"IP protocol (int)\", '{\"ip_proto\": 5, \"eth_type\": 34525}'],\n  [\"ipv4_src\", \"IPv4 source address (string)\", '{\"ipv4_src\": \"192.168.0.1\", \"eth_type\": 2048}'],\n  [\"ipv4_dst\", \"IPv4 destination address (string)\", '{\"ipv4_dst\": \"192.168.10.10/255.255.255.0\", \"eth_type\": 2048}'],\n  [\"tcp_src\", \"TCP source port (int)\", '{\"tcp_src\": 3, \"ip_proto\": 6, \"eth_type\": 2048}'],\n  [\"tcp_dst\", \"TCP destination port (int)\", '{\"tcp_dst\": 5, \"ip_proto\": 6, \"eth_type\": 2048}'],\n  [\"udp_src\", \"UDP source port (int)\", '{\"udp_src\": 2, \"ip_proto\": 17, \"eth_type\": 2048}'],\n  [\"udp_dst\", \"UDP destination port (int)\", '{\"udp_dst\": 6, \"ip_proto\": 17, \"eth_type\": 2048}'],\n  [\"sctp_src\", \"SCTP source port (int)\", '{\"sctp_src\": 99, \"ip_proto\": 132, \"eth_type\": 2048}'],\n  [\"sctp_dst\", \"SCTP destination port (int)\", '{\"sctp_dst\": 99, \"ip_proto\": 132, \"eth_type\": 2048}'],\n  [\"icmpv4_type\", \"ICMP type (int)\", '{\"icmpv4_type\": 5, \"ip_proto\": 1, \"eth_type\": 2048}'],\n  [\"icmpv4_code\", \"ICMP code (int)\", '{\"icmpv4_code\": 6, \"ip_proto\": 1, \"eth_type\": 2048}'],\n  [\"arp_op\", \"ARP opcode (int)\", '{\"arp_op\": 3, \"eth_type\": 2054}'],\n  [\"arp_spa\", \"ARP source IPv4 address (string)\", '{\"arp_spa\": \"192.168.0.11\", \"eth_type\": 2054}'],\n  [\"arp_tpa\", \"ARP target IPv4 address (string)\", '{\"arp_tpa\": \"192.168.0.44/24\", \"eth_type\": 2054}'],\n  [\"arp_sha\", \"ARP source hardware address (string)\", '{\"arp_sha\": \"aa:bb:cc:11:22:33\", \"eth_type\": 2054}'],\n  [\n    \"arp_tha\",\n    \"ARP target hardware address (string)\",\n    '{\"arp_tha\": \"aa:bb:cc:11:22:33/00:00:00:00:ff:ff\", \"eth_type\": 2054}',\n  ],\n  [\"ipv6_src\", \"IPv6 source address (string)\", '{\"ipv6_src\": \"2001::aaaa:bbbb:cccc:1111\", \"eth_type\": 34525}'],\n  [\"ipv6_dst\", \"IPv6 destination address (string)\", '{\"ipv6_dst\": \"2001::ffff:cccc:bbbb:1111/64\", \"eth_type\": 34525}'],\n  [\"ipv6_flabel\", \"IPv6 Flow Label (int)\", '{\"ipv6_flabel\": 2, \"eth_type\": 34525}'],\n  [\"icmpv6_type\", \"ICMPv6 type (int)\", '{\"icmpv6_type\": 3, \"ip_proto\": 58, \"eth_type\": 34525}'],\n  [\"icmpv6_code\", \"ICMPv6 code (int)\", '{\"icmpv6_code\": 4, \"ip_proto\": 58, \"eth_type\": 34525}'],\n  [\n    \"ipv6_nd_target\",\n    \"Target address for Neighbor Discovery (string)\",\n    '{\"ipv6_nd_target\": \"2001::ffff:cccc:bbbb:1111\", \"icmpv6_type\": 135, \"ip_proto\": 58, \"eth_type\": 34525}',\n  ],\n  [\n    \"ipv6_nd_sll\",\n    \"Source link-layer for Neighbor Discovery (string)\",\n    '{\"ipv6_nd_sll\": \"aa:bb:cc:11:22:33\", \"icmpv6_type\": 135, \"ip_proto\": 58, \"eth_type\": 34525}',\n  ],\n  [\n    \"ipv6_nd_tll\",\n    \"Target link-layer for Neighbor Discovery (string)\",\n    '{\"ipv6_nd_tll\": \"aa:bb:cc:11:22:33\", \"icmpv6_type\": 136, \"ip_proto\": 58, \"eth_type\": 34525}',\n  ],\n  [\"mpls_label\", \"MPLS label (int)\", '{\"mpls_label\": 3, \"eth_type\": 34888}'],\n  [\"mpls_tc\", \"MPLS Traffic Class (int)\", '{\"mpls_tc\": 2, \"eth_type\": 34888}'],\n  [\"mpls_bos\", \"MPLS BoS bit (int) (Openflow1.3+)\", '{\"mpls_bos\": 1, \"eth_type\": 34888}'],\n  [\n    \"pbb_isid\",\n    \"PBB I-SID (int or string) (Openflow1.3+)\",\n    '{\"pbb_isid\": 5, \"eth_type\": 35047} or{\"pbb_isid\": \"0x05/0xff\", \"eth_type\": 35047}',\n  ],\n  [\n    \"tunnel_id\",\n    \"Logical Port Metadata (int or string) (Openflow1.3+)\",\n    '{\"tunnel_id\": 7} or {\"tunnel_id\": \"0x07/0xff\"}',\n  ],\n  [\n    \"ipv6_exthdr\",\n    \"IPv6 Extension Header pseudo-field (int or string) (Openflow1.3+)\",\n    '{\"ipv6_exthdr\": 3, \"eth_type\": 34525} or {\"ipv6_exthdr\": \"0x40/0x1F0\", \"eth_type\": 34525}',\n  ],\n  // [\"pbb_uca\", \"PBB UCA hander field(int) (Openflow1.4+)\", '{\"pbb_uca\": 1, \"eth_type\": 35047}'],\n  // [\"tcp_flags\", \"TCP flags(int) (Openflow1.5+)\", '{\"tcp_flags\": 2, \"ip_proto\": 6, \"eth_type\": 2048}'],\n  // [\"actset_output\", \"Output port from action set metadata(int) (Openflow1.5+)\", '{\"actset_output\": 3}'],\n  // [\"packet_type\", \"Packet type value(int) (Openflow1.5+)\", '{\"packet_type\": [1, 2048]}'],\n] as const;\n\n// export type matchFieldsType = typeof matchFields[number][0];\n\n// export const matchFields = [\n//   [\"in_port\", \"Switch input port (int)\", '{\"in_port\": 7}'],\n//   [\"in_phy_port\", \"Switch physical input port (int)\", '{\"in_phy_port\": 5, \"in_port\": 3}'],\n//   [\n//     \"metadata\",\n//     \"Metadata passed between tables (int or string)\",\n//     '{\"metadata\": 12345} or {\"metadata\": \"0x1212/0xffff\"}',\n//   ],\n//   [\"eth_src\", \"(string)\"]\n//   [\"dl_src\", \"(string)\"]\n//   [\"eth_dst\", \"(string)\"]\n//   [\"dl_dst\", \"(string)\"]\n//   [\"eth_type\", \"(int)]\n//   [\"dl_type\", \"(int)]\n//   [\"vlan_vid\", \"(int or string)\"],\n//   [\"vlan_pcp\", \"VLAN priority (int)\", '{\"vlan_pcp\": 3, \"vlan_vid\": 3}'],\n//   [\"ip_dscp\", \"IP DSCP (6 bits in ToS field) (int)\", '{\"ip_dscp\": 3, \"eth_type\": 2048}'],\n//   [\"ip_ecn\", \"IP ECN (2 bits in ToS field) (int)\", '{\"ip_ecn\": 0, \"eth_type\": 34525}'],\n//   [\"ip_proto\", \"IP protocol (int)\", '{\"ip_proto\": 5, \"eth_type\": 34525}'],\n//   [\"ipv4_src\", \"IPv4 source address (string)\", '{\"ipv4_src\": \"192.168.0.1\", \"eth_type\": 2048}'],\n//   [\"ipv4_dst\", \"IPv4 destination address (string)\", '{\"ipv4_dst\": \"192.168.10.10/255.255.255.0\", \"eth_type\": 2048}'],\n//   [\"tcp_src\", \"TCP source port (int)\", '{\"tcp_src\": 3, \"ip_proto\": 6, \"eth_type\": 2048}'],\n//   [\"tcp_dst\", \"TCP destination port (int)\", '{\"tcp_dst\": 5, \"ip_proto\": 6, \"eth_type\": 2048}'],\n//   [\"udp_src\", \"UDP source port (int)\", '{\"udp_src\": 2, \"ip_proto\": 17, \"eth_type\": 2048}'],\n//   [\"udp_dst\", \"UDP destination port (int)\", '{\"udp_dst\": 6, \"ip_proto\": 17, \"eth_type\": 2048}'],\n//   [\"sctp_src\", \"SCTP source port (int)\", '{\"sctp_src\": 99, \"ip_proto\": 132, \"eth_type\": 2048}'],\n//   [\"sctp_dst\", \"SCTP destination port (int)\", '{\"sctp_dst\": 99, \"ip_proto\": 132, \"eth_type\": 2048}'],\n//   [\"icmpv4_type\", \"ICMP type (int)\", '{\"icmpv4_type\": 5, \"ip_proto\": 1, \"eth_type\": 2048}'],\n//   [\"icmpv4_code\", \"ICMP code (int)\", '{\"icmpv4_code\": 6, \"ip_proto\": 1, \"eth_type\": 2048}'],\n//   [\"arp_op\", \"ARP opcode (int)\", '{\"arp_op\": 3, \"eth_type\": 2054}'],\n//   [\"arp_spa\", \"ARP source IPv4 address (string)\", '{\"arp_spa\": \"192.168.0.11\", \"eth_type\": 2054}'],\n//   [\"arp_tpa\", \"ARP target IPv4 address (string)\", '{\"arp_tpa\": \"192.168.0.44/24\", \"eth_type\": 2054}'],\n//   [\"arp_sha\", \"ARP source hardware address (string)\", '{\"arp_sha\": \"aa:bb:cc:11:22:33\", \"eth_type\": 2054}'],\n//   [\n//     \"arp_tha\",\n//     \"ARP target hardware address (string)\",\n//     '{\"arp_tha\": \"aa:bb:cc:11:22:33/00:00:00:00:ff:ff\", \"eth_type\": 2054}',\n//   ],\n//   [\"ipv6_src\", \"IPv6 source address (string)\", '{\"ipv6_src\": \"2001::aaaa:bbbb:cccc:1111\", \"eth_type\": 34525}'],\n//   [\"ipv6_dst\", \"IPv6 destination address (string)\", '{\"ipv6_dst\": \"2001::ffff:cccc:bbbb:1111/64\", \"eth_type\": 34525}'],\n//   [\"ipv6_flabel\", \"IPv6 Flow Label (int)\", '{\"ipv6_flabel\": 2, \"eth_type\": 34525}'],\n//   [\"icmpv6_type\", \"ICMPv6 type (int)\", '{\"icmpv6_type\": 3, \"ip_proto\": 58, \"eth_type\": 34525}'],\n//   [\"icmpv6_code\", \"ICMPv6 code (int)\", '{\"icmpv6_code\": 4, \"ip_proto\": 58, \"eth_type\": 34525}'],\n//   [\n//     \"ipv6_nd_target\",\n//     \"Target address for Neighbor Discovery (string)\",\n//     '{\"ipv6_nd_target\": \"2001::ffff:cccc:bbbb:1111\", \"icmpv6_type\": 135, \"ip_proto\": 58, \"eth_type\": 34525}',\n//   ],\n//   [\n//     \"ipv6_nd_sll\",\n//     \"Source link-layer for Neighbor Discovery (string)\",\n//     '{\"ipv6_nd_sll\": \"aa:bb:cc:11:22:33\", \"icmpv6_type\": 135, \"ip_proto\": 58, \"eth_type\": 34525}',\n//   ],\n//   [\n//     \"ipv6_nd_tll\",\n//     \"Target link-layer for Neighbor Discovery (string)\",\n//     '{\"ipv6_nd_tll\": \"aa:bb:cc:11:22:33\", \"icmpv6_type\": 136, \"ip_proto\": 58, \"eth_type\": 34525}',\n//   ],\n//   [\"mpls_label\", \"MPLS label (int)\", '{\"mpls_label\": 3, \"eth_type\": 34888}'],\n//   [\"mpls_tc\", \"MPLS Traffic Class (int)\", '{\"mpls_tc\": 2, \"eth_type\": 34888}'],\n//   [\"mpls_bos\", \"MPLS BoS bit (int) (Openflow1.3+)\", '{\"mpls_bos\": 1, \"eth_type\": 34888}'],\n//   [\n//     \"pbb_isid\",\n//     \"PBB I-SID (int or string) (Openflow1.3+)\",\n//     '{\"pbb_isid\": 5, \"eth_type\": 35047} or{\"pbb_isid\": \"0x05/0xff\", \"eth_type\": 35047}',\n//   ],\n//   [\n//     \"tunnel_id\",\n//     \"Logical Port Metadata (int or string) (Openflow1.3+)\",\n//     '{\"tunnel_id\": 7} or {\"tunnel_id\": \"0x07/0xff\"}',\n//   ],\n//   [\n//     \"ipv6_exthdr\",\n//     \"IPv6 Extension Header pseudo-field (int or string) (Openflow1.3+)\",\n//     '{\"ipv6_exthdr\": 3, \"eth_type\": 34525} or {\"ipv6_exthdr\": \"0x40/0x1F0\", \"eth_type\": 34525}',\n//   ],\n//   // [\"pbb_uca\", \"PBB UCA hander field(int) (Openflow1.4+)\", '{\"pbb_uca\": 1, \"eth_type\": 35047}'],\n//   // [\"tcp_flags\", \"TCP flags(int) (Openflow1.5+)\", '{\"tcp_flags\": 2, \"ip_proto\": 6, \"eth_type\": 2048}'],\n//   // [\"actset_output\", \"Output port from action set metadata(int) (Openflow1.5+)\", '{\"actset_output\": 3}'],\n//   // [\"packet_type\", \"Packet type value(int) (Openflow1.5+)\", '{\"packet_type\": [1, 2048]}'],\n// ] as const;\n\nexport const actionsFields = [\n  [\"OUTPUT\", 'Output packet from \"port\"', '{\"type\": \"OUTPUT\", \"port\": 3}'],\n  [\"COPY_TTL_OUT\", \"Copy TTL outwards\", '{\"type\": \"COPY_TTL_OUT\"}'],\n  [\"COPY_TTL_IN\", \"Copy TTL inwards\", '{\"type\": \"COPY_TTL_IN\"}'],\n  [\"SET_MPLS_TTL\", 'Set MPLS TTL using \"mpls_ttl\"', '{\"type\": \"SET_MPLS_TTL\", \"mpls_ttl\": 64}'],\n  [\"DEC_MPLS_TTL\", \"Decrement MPLS TTL\", '{\"type\": \"DEC_MPLS_TTL\"}'],\n  [\"PUSH_VLAN\", 'Push a new VLAN tag with \"ethertype\"', '{\"type\": \"PUSH_VLAN\", \"ethertype\": 33024}'],\n  [\"POP_VLAN\", \"Pop the outer VLAN tag\", '{\"type\": \"POP_VLAN\"}'],\n  [\"PUSH_MPLS\", 'Push a new MPLS tag with \"ethertype\"', '{\"type\": \"PUSH_MPLS\", \"ethertype\": 34887}'],\n  [\"POP_MPLS\", 'Pop the outer MPLS tag with \"ethertype\"', '{\"type\": \"POP_MPLS\", \"ethertype\": 2054}'],\n  [\"SET_QUEUE\", 'Set queue id using \"queue_id\" when outputting to a port', '{\"type\": \"SET_QUEUE\", \"queue_id\": 7}'],\n  [\"GROUP\", 'Apply group identified by \"group_id\"', '{\"type\": \"GROUP\", \"group_id\": 5}'],\n  [\"SET_NW_TTL\", 'Set IP TTL using \"nw_ttl\"', '{\"type\": \"SET_NW_TTL\", \"nw_ttl\": 64}'],\n  [\"DEC_NW_TTL\", \"Decrement IP TTL\", '{\"type\": \"DEC_NW_TTL\"}'],\n  [\n    \"SET_FIELD\",\n    'Set a \"field\" using \"value\" (The set of keywords available for \"field\" is the same as match field)',\n    \"See Example of set-field action\",\n  ],\n  [\n    \"PUSH_PBB\",\n    'Push a new PBB service tag with \"ethertype\" (Openflow1.3+)',\n    '{\"type\": \"PUSH_PBB\", \"ethertype\": 35047}',\n  ],\n  [\"POP_PBB\", \"Pop the outer PBB service tag (Openflow1.3+)\", '{\"type\": \"POP_PBB\"}'],\n  // [\n  //   \"COPY_FIELD\",\n  //   \"Copy value between header and register (Openflow1.5+)\",\n  //   '{\"type\": \"COPY_FIELD\", \"n_bits\": 32, \"src_offset\": 1, \"dst_offset\": 2, \"src_oxm_id\": \"eth_src\", \"dst_oxm_id\": \"eth_dst\"}',\n  // ],\n  // [\"METER\", 'Apply meter identified by \"meter_id\" (Openflow1.5+)', '{\"type\": \"METER\", \"meter_id\": 3}'],\n  [\n    \"EXPERIMENTER\",\n    'Extensible action for the experimenter (Set \"base64\" or \"ascii\" to \"data_type\" field)',\n    '{\"type\": \"EXPERIMENTER\", \"experimenter\": 101, \"data\": \"AAECAwQFBgc=\", \"data_type\": \"base64\"}',\n  ],\n  [\n    \"GOTO_TABLE\",\n    '(Instruction) Setup the next table identified by \"table_id\"',\n    '{\"type\": \"GOTO_TABLE\", \"table_id\": 8}',\n  ],\n  [\n    \"WRITE_METADATA\",\n    '(Instruction) Setup the metadata field using \"metadata\" and \"metadata_mask\"',\n    '{\"type\": \"WRITE_METADATA\", \"metadata\": 0x3, \"metadata_mask\": 0x3}',\n  ],\n  [\n    \"METER\",\n    '(Instruction) Apply meter identified by \"meter_id\" (deprecated in Openflow1.5)',\n    '{\"type\": \"METER\", \"meter_id\": 3}',\n  ],\n  [\n    \"WRITE_ACTIONS\",\n    \"(Instruction) Write the action(s) onto the datapath action set\",\n    '{\"type\": \"WRITE_ACTIONS\", actions\":[{\"type\":\"POP_VLAN\",},{ \"type\":\"OUTPUT\", \"port\": 2}]}',\n  ],\n  [\"CLEAR_ACTIONS\", \"(Instruction) Clears all actions from the datapath action set\", '{\"type\": \"CLEAR_ACTIONS\"}'],\n] as const;\n\n// export type actionsFieldsType = typeof actionsFields[number][0];\n\nexport type sectionNameType = \"actions\" | \"match\";\nexport type fieldsType<secName extends sectionNameType> = secName extends \"match\"\n  ? typeof matchFields\n  : typeof actionsFields;\nexport type fieldsNameType<secName extends sectionNameType> = fieldsType<secName>[number][0];\n\n// matchFields.map(m=> ({[m[0]]:m[1].concat}))\n","import React, { useState } from \"react\";\nimport { sectionNameType, fieldsType, fieldsNameType } from \"../../components/aclsFields\";\nimport Popup from \"reactjs-popup\";\nimport AddOutlinedIcon from \"@material-ui/icons/AddOutlined\";\n\nexport default <SecName extends sectionNameType>({\n  handleAddField,\n  fields,\n  secName,\n}: {\n  fields: fieldsType<SecName>;\n  handleAddField: (key: fieldsNameType<SecName>) => void;\n  secName: SecName;\n}) => {\n  const [filterField, setFilterField] = useState(\"\");\n\n  fields = fields\n    ? filterField\n      ? (fields as any).filter((f: fieldsType<SecName>[number]) => f[0].includes(filterField))\n      : fields\n    : [];\n\n  return (\n    <Popup\n      trigger={\n        <div className=\"button addButton\">\n          <AddOutlinedIcon fontSize={\"large\"} />\n        </div>\n      }\n      position=\"right top\"\n      on=\"hover\"\n      closeOnDocumentClick\n      mouseLeaveDelay={400}\n      mouseEnterDelay={0}\n      contentStyle={{ border: \"none\", width: 200, transition: \"all 1s ease-out\" }}\n      arrow={true}\n    >\n      <div>\n        <input\n          value={filterField}\n          type=\"text\"\n          style={{ width: 100, border: \"none\", fontSize: \"0.9em\" }}\n          placeholder=\"filter...\"\n          onChange={(e) => setFilterField(e.target.value)}\n        />\n        <div className=\"popupMenu\">\n          {(fields as any).map((field: fieldsType<SecName>[number]) => (\n            <Popup\n              key={field[0]}\n              trigger={\n                <div key={field[0]} className=\"menu-item\" onClick={() => handleAddField(field[0])}>\n                  {field[0]}\n                </div>\n              }\n              position=\"right top\"\n              on=\"hover\"\n              mouseLeaveDelay={200}\n              mouseEnterDelay={200}\n              contentStyle={{ border: \"none\", width: 200 }}\n              arrow={true}\n            >\n              <Popup\n                key={field[0]}\n                trigger={<div>{field[1]}</div>}\n                position=\"top center\"\n                on=\"hover\"\n                mouseLeaveDelay={0}\n                mouseEnterDelay={0}\n                contentStyle={{ border: \"none\", width: 200 }}\n                arrow={true}\n              >\n                {field[2] as any}\n              </Popup>\n            </Popup>\n          ))}\n        </div>\n      </div>\n    </Popup>\n  );\n};\n","import React from \"react\";\nimport { sectionNameType, fieldsNameType } from \"../../components/aclsFields\";\nimport { TextField } from \"@material-ui/core\";\nimport DeleteOutlinedIcon from \"@material-ui/icons/DeleteOutlined\";\n\nexport default <SecName extends sectionNameType>({\n  name,\n  value,\n  handleDelField,\n  handleSaveFieldChange,\n}: {\n  name: string;\n  value: string;\n  handleDelField: (key: fieldsNameType<SecName>) => void;\n  handleSaveFieldChange: (value: string, key: fieldsNameType<SecName>) => void;\n}) => {\n  // const [value, setValue] = useState(initialValue);\n\n  return (\n    <div className=\"propBox\" key={name}>\n      <div className=\"propField propKey\">\n        <div>{name}</div>\n      </div>\n      <div\n        className=\"propField propValue\"\n        onMouseDown={\n          (e) => e.stopPropagation() // prevent the draging whan selecting text\n        }\n      >\n        <TextField\n          type=\"text\"\n          value={value}\n          className=\"inputField\"\n          placeholder=\"Enter Value...\"\n          onChange={(e) => handleSaveFieldChange(e.target.value, name as any)}\n          style={{ fontSize: \"0.9em\" }}\n        />\n      </div>\n      <DeleteOutlinedIcon\n        titleAccess=\"Delete this field\"\n        fontSize={\"large\"}\n        className=\"button addButton\"\n        onClick={() => handleDelField(name as fieldsNameType<SecName>)}\n      />\n    </div>\n  );\n};\n","import React, { useContext, useEffect } from \"react\";\nimport { CanvasContext, flowUIType } from \"../../SwitchView\";\nimport { flowType } from \"../../../../utils/serverRequests\";\nimport { sectionNameType, fieldsType, fieldsNameType } from \"../../components/aclsFields\";\nimport PopUpMenu from \"./PopUpMenu\";\nimport InputField from \"./InputField\";\n\nexport default <SecName extends sectionNameType>({\n  sectionName,\n  fields,\n  details,\n  setDetails,\n}: {\n  sectionName: SecName;\n  fields: fieldsType<SecName>;\n  // details: BoxType[\"modData\"][SecName];\n  details: flowType[SecName];\n  setDetails: React.Dispatch<React.SetStateAction<flowType[SecName]>>;\n}) => {\n  const c = useContext(CanvasContext);\n\n  type fieldName = fieldsNameType<SecName>;\n\n  const handleAddField = (key: fieldName) => {\n    setDetails({ ...Object.assign(details, { [key]: \"\" }) });\n  };\n\n  // useEffect(() => {}, [details]);\n\n  const handleDelField = (key: fieldName) => {\n    setDetails((details) => {\n      // key = \"OUTPUT\";\n      // newDetails.\n      const newDetails = { ...details };\n      // newDetails.\n      delete (newDetails as any)[key];\n      return newDetails;\n    });\n  };\n\n  const handleSaveFieldChange = (value: string, key: fieldName) => {\n    setDetails({ ...Object.assign(details, { [key]: value }) });\n  };\n\n  return (\n    <div className=\"section\">\n      <PopUpMenu handleAddField={handleAddField} fields={fields} secName={sectionName} />\n      <div className=\"sectionHeader\">{sectionName}:</div>\n      {Object.keys(details).map((key) => (\n        <InputField\n          {...{\n            key,\n            name: key,\n            value: (details as any)[key],\n            handleDelField,\n            handleSaveFieldChange,\n          }}\n        />\n      ))}\n    </div>\n  );\n};\n","import React, { useState, useContext } from \"react\";\nimport Draggable from \"react-draggable\";\n// import MaterialIcon from \"material-icons-react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport CloseOutlinedIcon from \"@material-ui/icons/CloseOutlined\";\nimport CheckIcon from \"@material-ui/icons/Check\";\nimport SaveIcon from \"@material-ui/icons/Save\";\n// import SettingsBackupRestoreIcon from \"@material-ui/icons/SettingsBackupRestore\";\nimport { matchFields, actionsFields } from \"../../components/aclsFields\";\nimport { CanvasContext, flowUIType } from \"../../SwitchView\";\nimport { isEqual } from \"lodash\";\nimport { flowType } from \"../../../../utils/serverRequests\";\nimport { Grid } from \"@material-ui/core\";\nimport SectionMenu from \"./SectionMenu\";\n\nexport default ({ flow }: { flow: flowUIType }) => {\n  const c = useContext(CanvasContext);\n  // if (!flow.details) flow.details = { match: {}, actions: {}, priority: 1 };\n\n  const [matchDetails, setMatchDetails] = useState({ ...flow.details.match });\n  const [actionsDetails, setActionsDetails] = useState({ ...flow.details.actions });\n  const [priority, setPriority] = useState(flow.details.priority || 1);\n\n  const modDetails: flowType = {\n    match: { ...matchDetails },\n    actions: { ...actionsDetails },\n    priority: priority,\n  };\n\n  const handleSaveChanges = (flowDetails?: flowType) => {\n    const updatedFlow: flowUIType = {\n      ...flow,\n      details: flowDetails || modDetails,\n      isSynced: true,\n      box: { ...flow.box, flowDetailsModalOpen: false },\n    };\n    c.updateFlowOnServer(flow.box.id, updatedFlow);\n  };\n\n  const handleClose = () => {\n    c.updateBoxOnUi({ ...flow.box, flowDetailsModalOpen: false });\n  };\n\n  const handleConfirmFlow = () => {\n    //here we should add this flow to the the vSwitch\n    c.addFlowToServer({\n      flow: { ...flow, details: modDetails },\n      callback: (flowDetails) => handleSaveChanges(flowDetails),\n    });\n  };\n\n  return (\n    <Draggable enableUserSelectHack={false} defaultPosition={{ x: flow.box.x, y: flow.box.y - 100 }}>\n      <div className=\"menuWindowContainer\" onClick={(e) => e.stopPropagation()}>\n        <div style={{ display: \"flex\", alignSelf: \"flex-end\" }}>\n          {isEqual(flow.details, { ...flow.details, ...modDetails }) === false && flow.isSynced ? (\n            <>\n              <SaveIcon\n                titleAccess=\"Update changes of this flow entry on the vSwitch\"\n                className=\"button\"\n                fontSize={\"large\"}\n                style={{ position: \"relative\" }}\n                onClick={() => handleSaveChanges()}\n              />\n            </>\n          ) : null}\n          <CloseOutlinedIcon fontSize={\"large\"} className=\"button closeButton\" onClick={handleClose} titleAccess=\"Close\" />\n          {flow.isSynced ? null : (\n            <CheckIcon\n              fontSize={\"large\"}\n              className=\"button closeButton\"\n              onClick={handleConfirmFlow}\n              titleAccess=\"Confirm new flow\"\n            />\n          )}\n        </div>\n\n        {/* <div className={\"header\"}>{`${flow.box.name}`}</div> */}\n        <div className=\"header\">\n          <InputBase\n            defaultValue={flow.box.name}\n            inputProps={{ \"aria-label\": \"naked\", style: { textAlign: \"center\" } }}\n            style={{ fontSize: \"1.4em\" }}\n            onChange={(e) => c.updateFlowName(flow.box.id, e.target.value)}\n          />\n        </div>\n        <hr style={{ width: \"90%\" }} />\n        <div className=\"propsContainer\">\n          <Grid container justify=\"center\">\n            <TextField\n              type=\"text\"\n              label=\"priority\"\n              placeholder=\"Enter Value...\"\n              value={priority}\n              onChange={(e) => setPriority(Number(e.target.value))}\n              style={{ fontSize: \"0.9em\", margin: \"8px 0\" }}\n            />\n          </Grid>\n\n          <SectionMenu sectionName=\"match\" fields={matchFields} details={matchDetails} setDetails={setMatchDetails} />\n          <SectionMenu sectionName=\"actions\" fields={actionsFields} details={actionsDetails} setDetails={setActionsDetails} />\n        </div>\n      </div>\n    </Draggable>\n  );\n};\n","import React, { useState, useRef, useContext } from \"react\";\nimport Xarrow from \"react-xarrows\";\nimport { CanvasContext } from \"../SwitchView\";\nimport { PortType } from \"./Port\";\nimport { BoxType } from \"./Box\";\n\nconst connectPointStyle = {\n  position: \"absolute\",\n  width: 10,\n  height: 10,\n  borderRadius: \"50%\",\n  background: \"black\",\n};\nconst connectPointOffset = {\n  left: { left: 0, top: \"50%\", transform: \"translate(-50%, -50%)\" },\n  right: { left: \"100%\", top: \"50%\", transform: \"translate(-50%, -50%)\" },\n  top: { left: \"50%\", top: 0, transform: \"translate(-50%, -50%)\" },\n  bottom: { left: \"50%\", top: \"100%\", transform: \"translate(-50%, -50%)\" },\n} as const;\n\nconst ConnectPointsWrapper = ({\n  element,\n  handlers = [\"left\", \"right\", \"bottom\", \"top\"],\n  elemPos = { x: 0, y: 0 },\n}: {\n  element: BoxType | PortType;\n  handlers?: (keyof typeof connectPointOffset)[];\n  elemPos?: { x: number; y: number };\n}) => {\n  return (\n    <React.Fragment>\n      {handlers.map((handler) => (\n        <ConnectPoint {...{ handler, element, elemPos, key: handler }} />\n      ))}\n    </React.Fragment>\n  );\n};\n\nconst ConnectPoint = ({\n  element,\n  handler,\n  elemPos = { x: 0, y: 0 },\n}: {\n  element: BoxType | PortType;\n  handler?: keyof typeof connectPointOffset;\n  elemPos?: { x: number; y: number };\n}) => {\n  const c = useContext(CanvasContext);\n  const ref1 = useRef();\n\n  const [position, setPosition] = useState({});\n  const [beingDragged, setBeingDragged] = useState(false);\n\n  return (\n    <React.Fragment key={handler}>\n      <div\n        className=\"connectPoint\"\n        style={\n          {\n            ...connectPointStyle,\n            ...connectPointOffset[handler],\n            ...position,\n            zIndex: 1,\n          } as React.CSSProperties\n        }\n        draggable\n        onMouseDown={(e) => e.stopPropagation()}\n        onDragStart={(e) => {\n          setBeingDragged(true);\n          c.setSelected(element);\n          c.handleBoxClick(e, element);\n          c.setActionState(\"Add Connections\");\n          e.dataTransfer.setData(\"arrow\", element.id);\n        }}\n        onDrag={(e) => {\n          setPosition({\n            position: \"fixed\",\n            left: e.clientX - elemPos.x,\n            top: e.clientY - elemPos.y,\n            transform: \"none\",\n            opacity: 0,\n          });\n        }}\n        ref={ref1}\n        onDragEnd={(e) => {\n          setPosition({});\n          setBeingDragged(false);\n          c.handleSelect(null);\n        }}\n      />\n      {beingDragged ? (\n        <Xarrow\n          start={element.id}\n          end={ref1}\n          startAnchor={handler}\n          advanced={{ passProps: { divContainer: { style: { zIndex: 1 } } } }}\n        />\n      ) : null}\n    </React.Fragment>\n  );\n};\n\nexport default ConnectPointsWrapper;\n// export default DragDropContext(HTML5Backend)(DragSource(\"connectPoint\", dndSource, dndCollect)(ConnectPointsWrapper));\n","import React, { useState, useContext, useRef } from \"react\";\nimport ConnectPointsWrapper from \"./ConnectPointsWrapper\";\nimport { CanvasContext, lineType } from \"../SwitchView\";\nimport { portPolarityType } from \"./PortsBar\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { portDetailsType } from \"../../../utils/serverRequests\";\n\nexport type PortType = {\n  id: string;\n  name: string;\n  port: portDetailsType;\n  ref: React.MutableRefObject<any>;\n  shape: \"portBox\";\n};\n\nconst Port = ({ port, portPolarity, lines }: { port: PortType; portPolarity: portPolarityType; lines: lineType[] }) => {\n  const c = useContext(CanvasContext);\n  const [wasDragged, setWasDragged] = useState(false);\n  let background = c.chooseBoxBackground(port);\n  port.ref = useRef();\n\n  return (\n    <div>\n      <Tooltip\n        interactive\n        arrow\n        enterDelay={800}\n        title={(Object.keys(port.port) as Array<keyof portDetailsType>).map((detail, i) => {\n          return (\n            <div key={detail} style={{ fontSize: 13, marginBottom: 2 }}>\n              {detail}: {port.port[detail]}\n              <br />\n            </div>\n          );\n        })}\n      >\n        <div>\n          <div\n            ref={port.ref}\n            className={`portBox hoverMarker`}\n            style={{ background }}\n            onClick={(e) => {\n              if (wasDragged === false) c.handleBoxClick(e, port);\n              setWasDragged(false);\n            }}\n            id={port.id}\n            onDragOver={(e) => e.preventDefault()}\n            onDrop={(e) => {\n              if (e.dataTransfer.getData(\"arrow\") !== port.id) {\n                if (portPolarity === \"output\")\n                  c.addLine({ startBoxId: e.dataTransfer.getData(\"arrow\"), endBoxId: port.id });\n              }\n            }}\n          >\n            <ConnectPointsWrapper element={port} handlers={portPolarity === \"input\" ? [\"right\"] : []} />\n            <div>\n              {port.name}\n              <br />\n              (...{port.port.hw_addr.slice(-5)})\n              <br />({port.port.port_no})\n            </div>\n          </div>\n\n          {/* {lines\n            .filter((line) => line.props.start === port.id)\n            .map((line, i) => (\n              <XarrowWrapper key={line.props.start + \"-\" + line.props.end + i} {...{ line, selected: c.selected }} />\n            ))} */}\n        </div>\n      </Tooltip>\n    </div>\n    // <div>\n    //   <Popup\n    //     trigger={\n    //       // <AttachXarrow>\n\n    //       <div\n    //         ref={port.ref}\n    //         className={`portBox hoverMarker`}\n    //         style={{ background }}\n    //         onClick={(e) => {\n    //           if (wasDragged === false) c.handleBoxClick(e, port);\n    //           setWasDragged(false);\n    //         }}\n    //         id={port.id}\n    //         onDragOver={(e) => e.preventDefault()}\n    //         onDrop={(e) => {\n    //           if (e.dataTransfer.getData(\"arrow\") !== port.id) {\n    //             if (portPolarity === \"output\")\n    //               c.addLine({ startBoxId: e.dataTransfer.getData(\"arrow\"), endBoxId: port.id });\n    //           }\n    //         }}\n    //       >\n    //         <ConnectPointsWrapper element={port} handlers={portPolarity === \"input\" ? [\"right\"] : []} />\n    //         <div>\n    //           {port.name}\n    //           <br />\n    //           (...{port.port.hw_addr.slice(-5)})\n    //           <br />({port.port.port_no})\n    //         </div>\n    //       </div>\n    //       // {/* </AttachXarrow> */}\n    //     }\n    //     position=\"left center\"\n    //     on=\"hover\"\n    //     closeOnDocumentClick\n    //     mouseLeaveDelay={100}\n    //     mouseEnterDelay={500}\n    //     contentStyle={{ width: \"max-content\" }}\n    //     arrow={true}\n    //   >\n    //     <div>\n    //       {(Object.keys(port.port) as Array<keyof portDetailsType>).map((detail, i) => {\n    //         detail = detail;\n    //         let s = detail;\n    //         return (\n    //           <div key={detail}>\n    //             {detail}: {port.port[detail]}\n    //             <br />\n    //           </div>\n    //         );\n    //       })}\n    //       {/* {lines\n    //         .filter((line) => line.props.start === port.id)\n    //         .map((line, i) => (\n    //           <XarrowWrapper key={line.props.start + \"-\" + line.props.end + i} {...{ line, selected: c.selected }} />\n    //         ))} */}\n    //     </div>\n    //   </Popup>\n    // </div>\n  );\n};\n\nexport default React.memo(Port);\n","import React, { useContext } from \"react\";\nimport Port, { PortType } from \"./Port\";\nimport { lineType } from \"../SwitchView\";\nimport XarrowWrapper from \"./XarrowWrapper\";\nimport { CanvasContext } from \"../SwitchView\";\n\nexport type portPolarityType = \"input\" | \"output\";\n\nconst PortBar = ({\n  ports,\n  portPolarity,\n  lines = [],\n}: {\n  ports: PortType[];\n  portPolarity: portPolarityType;\n  lines?: lineType[];\n}) => {\n  //   console.log(\"PortsBar renderd\");\n  const c = useContext(CanvasContext);\n\n  return (\n    <div className=\"portsBarStyle\" id=\"portsInputsBar\">\n      <u className=\"portTitleStyle\">{portPolarity}s</u>\n      {ports.map((port) => {\n        const id = port.id + `:<${portPolarity}>`;\n        return <Port key={id} port={{ ...port, id }} portPolarity={portPolarity} lines={lines} />;\n      })}\n\n      {/* adding port will maybe be supported later */}\n      {/* <div className=\"button\" style={{ position: \"absolute\", bottom: 5 }} onClick={handleAddPort}>\n        <MaterialIcon size={30} icon=\"add\" className=\"material-icons\" />\n      </div> */}\n    </div>\n  );\n};\n\nexport default React.memo(PortBar);\n","import React from \"react\";\n\nconst TestComponent = (props) => {\n  //   const c = useContext(CanvasContext);\n  // console.log(\"!!!!!!!!!!!!!1TestComponent render!!!!!!!!!!!!\");\n  return null;\n};\n\nexport default React.memo(TestComponent);\n","import React, { useContext } from \"react\";\nimport EditOutlinedIcon from \"@material-ui/icons/EditOutlined\";\nimport DeleteOutlineIcon from \"@material-ui/icons/DeleteOutline\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport { CanvasContext, switchSelfType, flowUIType } from \"../../SwitchView\";\n\ntype FlowDetailsProps = {\n  i: number;\n  flowEntry: flowUIType;\n};\n\nexport default ({ flowEntry, i }: FlowDetailsProps) => {\n  const c = useContext(CanvasContext);\n  const { details } = flowEntry;\n  // details.\n  const background = flowEntry.box.visible ? \"LemonChiffon\" : undefined;\n\n  return (\n    <Tooltip\n      arrow\n      enterDelay={800}\n      title={Object.keys(details)\n        .filter((k) => k !== \"actions\" && k !== \"match\")\n        .map((detailKey) => (\n          <div key={detailKey} style={{ fontSize: 12 }}>\n            {/* hey */}\n            {detailKey}: {(details as any)[detailKey]}\n          </div>\n        ))}\n    >\n      <div className=\"propBoxEntryPreview grayHover\" style={{ background }} onClick={() => c.toggleFlowVisibility(flowEntry)}>\n        <div style={{ width: 20 }}>{flowEntry.box.name}:</div>\n        <div style={{ flex: 0.9 }}>\n          {\n            <ul>\n              {(Object.keys(details.match) as Array<keyof typeof details.match>).map((matchKey) => (\n                <li key={matchKey}>\n                  {matchKey}: {details.match[matchKey]}\n                </li>\n              ))}\n            </ul>\n          }\n        </div>\n        <div style={{ width: 30 }}>--{\">\"}</div>\n        <div style={{ flex: 0.9 }}>{JSON.stringify(details.actions, null, 2)}</div>\n        <EditOutlinedIcon\n          fontSize={\"large\"}\n          className={`button`}\n          onClick={(e) => {\n            e.stopPropagation();\n            c.updateBoxOnUi({ ...flowEntry.box, flowDetailsModalOpen: !flowEntry.box.flowDetailsModalOpen });\n            // c.setBoxes((boxes) => {\n            //   const newBoxes = [...boxes];\n            //   const newBox = newBoxes.find((b) => b.id === JSON.stringify(flowEntry.details.match));\n            //   newBox.menuWindowOpened = !newBox.menuWindowOpened;\n            //   return newBoxes;\n            // });\n          }}\n        />\n        <DeleteOutlineIcon\n          fontSize={\"large\"}\n          className=\"button\"\n          onClick={(e) => {\n            e.stopPropagation();\n            c.delFlow(flowEntry);\n          }}\n        />\n      </div>\n    </Tooltip>\n  );\n};\n","import React from \"react\";\nimport { switchSelfType } from \"../../SwitchView\";\nimport Draggable from \"react-draggable\";\nimport CloseOutlinedIcon from \"@material-ui/icons/CloseOutlined\";\n// import { matchFieldsType } from \"../components/aclsFields\";\nimport FlowDetails from \"./FlowDetails\";\n\ntype SwitchDetailsWindowProps = {\n  setSwitchDetailsWindow: (value: React.SetStateAction<boolean>) => void;\n  flowEntries: switchSelfType[\"flowEntries\"];\n};\n\nexport default ({ setSwitchDetailsWindow, flowEntries = [] }: SwitchDetailsWindowProps) => {\n  return (\n    <Draggable enableUserSelectHack={false}>\n      <div className=\"switchDetailsWindow\" onClick={(e) => e.stopPropagation()}>\n        <CloseOutlinedIcon fontSize={\"large\"} className=\"button closeButton\" onClick={() => setSwitchDetailsWindow(false)} />\n        <div className={\"header\"}>{`Flow Entries`}</div>\n        <hr style={{ width: \"90%\" }} />\n        {flowEntries.map((flowEntry, i) =>\n          flowEntry.isSynced ? (\n            <FlowDetails key={JSON.stringify(flowEntry.details.match)} {...{ flowEntry, i }}></FlowDetails>\n          ) : null\n        )}\n        {/* <h3>unconfirmed flows</h3>\n        {flowEntries.map((flowEntry, i) =>\n          flowEntry.isSynced ? null : (\n            <FlowDetails key={JSON.stringify(flowEntry.details.match)} {...{ flowEntry, i }}></FlowDetails>\n          )\n        )} */}\n      </div>\n      {/* </Rnd> */}\n    </Draggable>\n  );\n};\n","import React from \"react\";\nimport { boxShapes } from \"./../SwitchView\";\n\nconst ToolboxMenu = () => {\n  return (\n    <div className=\"toolboxMenu\">\n      <div className=\"toolboxTitle\">Drag & drop me!</div>\n      <hr />\n      <div className=\"toolboxContainer\">\n        {boxShapes.map((shapeName) => (\n          <div\n            key={shapeName}\n            className={shapeName + \" grabble\"}\n            onDragStart={(e) => e.dataTransfer.setData(\"shape\", shapeName)}\n            draggable\n          >\n            {shapeName}\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default ToolboxMenu;\n","import React, { useContext } from \"react\";\nimport \"./TopBar.css\";\nimport KeyboardArrowUpOutlinedIcon from \"@material-ui/icons/KeyboardArrowUpOutlined\";\n// import MaterialIcon from \"material-icons-react\";\nimport { CanvasContext } from \"../SwitchView\";\nimport { PortType } from \"./Port\";\nimport { BoxType } from \"./Box\";\n\nconst actions = {\n  modBox: [\"Edit Mods\", \"Add Connections\", \"Remove Connections\", \"Hide\", \"Delete\"],\n  portBox: [\"Add Connections\", \"Remove Connections\"],\n  portBoxOut: [],\n  arrow: [\"Remove Connection\"],\n} as const;\n\ntype Writeable<T> = { -readonly [P in keyof T]: Writeable<T[P]> };\ntype ArrayElem<A> = A extends Array<infer Elem> ? Elem : never;\nfunction elemT<T>(array: T): Array<ArrayElem<T>> {\n  return array as any;\n}\n\ntype actionsType = typeof actions;\ntype actionsKeysType = keyof actionsType;\nexport type actionsTypes = actionsType[actionsKeysType][number] | \"Normal\";\n\nconst TopBar = () => {\n  const c = useContext(CanvasContext);\n\n  // console.log(\"Topbar renderd\");\n\n  const handleEditAction = (action: actionsTypes) => {\n    switch (action) {\n      case \"Add Connections\":\n        c.setActionState(\"Add Connections\");\n        break;\n      case \"Remove Connections\":\n        // remove connections of one arrows from box based on box that was selected\n        c.setActionState(\"Remove Connections\");\n        break;\n      case \"Remove Connection\":\n        // remove connection of one arrow based on arrow that is currently selected\n        c.removeSelectedLine();\n        break;\n      case \"Edit Mods\":\n        c.openModsWindowOfSelected();\n        break;\n      case \"Hide\":\n        c.toggleFlowVisibilityOfSelected();\n        break;\n      case \"Delete\":\n        c.removeSelectedBox();\n\n        break;\n      default:\n    }\n  };\n\n  var returnTopBarAppearance = () => {\n    let allowedActions: actionsType[actionsKeysType] = [];\n\n    if (c.selected) {\n      allowedActions = actions[c.selected.shape];\n      if (c.selected.shape.includes(\"Box\") && (c.selected as BoxType | PortType).id.includes(\":<output>\"))\n        allowedActions = actions.portBoxOut;\n    }\n    switch (c.actionState) {\n      case \"Normal\":\n        return (\n          <div className=\"actionBubblesContainer\">\n            {elemT(allowedActions).map((action: actionsTypes, i: number) => (\n              <div className=\"actionBubble\" key={i} onClick={() => handleEditAction(action)}>\n                {action}\n              </div>\n            ))}\n          </div>\n        );\n      case \"Add Connections\":\n        return (\n          <div className=\"actionBubblesContainer\">\n            <p>To where connect new connection?</p>\n            <div className=\"actionBubble\" onClick={() => c.setActionState(\"Normal\")}>\n              finish\n            </div>\n          </div>\n        );\n\n      case \"Remove Connections\":\n        return (\n          <div className=\"actionBubblesContainer\">\n            <p>Which connection to remove?</p>\n          </div>\n        );\n      default:\n    }\n  };\n\n  return (\n    <div className=\"topBarStyle\" style={{ height: c.selected === null ? \"0\" : \"60px\" }} onClick={(e) => e.stopPropagation()}>\n      <div className=\"topBarLabel\" onClick={() => c.handleSelect(null)}>\n        <KeyboardArrowUpOutlinedIcon fontSize={\"large\"} className=\" topBarToggleIcon\" />\n      </div>\n      {returnTopBarAppearance()}\n    </div>\n  );\n};\n\nexport default React.memo(TopBar);\n","import React, { useContext, useRef, useState } from \"react\";\r\n// import Draggable, { DraggableEvent, DraggableData } from \"react-draggable\";\r\nimport Draggable, { DraggableEvent, DraggableData } from \"react-draggable\";\r\nimport { CanvasContext, constants } from \"../SwitchView\";\r\nimport ConnectPointsWrapper from \"./ConnectPointsWrapper\";\r\nimport { matchFields } from \"./aclsFields\";\r\n\r\nimport { boxShapesType } from \"../SwitchView\";\r\nimport { fieldsNameType } from \"./aclsFields\";\r\n\r\nexport type BoxType = {\r\n  id: string;\r\n  shape?: boxShapesType;\r\n  ref?: React.MutableRefObject<any>;\r\n  x?: number;\r\n  y?: number;\r\n  clientX?: number;\r\n  clientY?: number;\r\n  name?: string;\r\n  flowDetailsModalOpen?: boolean;\r\n  visible?: boolean;\r\n};\r\n\r\nconst Box = (props: { box: BoxType; boxes: BoxType[] }) => {\r\n  // console.log(props.box);\r\n\r\n  const c = useContext(CanvasContext);\r\n  const { boxes, box } = props;\r\n  const [wasDragged, setWasDragged] = useState(false);\r\n\r\n  if (!box.shape) box.shape = \"modBox\";\r\n  if (!box.x) box.x = 0;\r\n  if (!box.y) box.y = 0;\r\n  const handleDrag = (e: DraggableEvent, data: DraggableData, id: string) => {\r\n    let newBoxes = [...boxes];\r\n    let i = boxes.findIndex((b) => b.id === id);\r\n    newBoxes[i].x = data.lastX;\r\n    newBoxes[i].y = data.lastY;\r\n    c.updateBoxOnUi(newBoxes[i]);\r\n  };\r\n\r\n  let background = c.chooseBoxBackground(box);\r\n\r\n  box.ref = useRef();\r\n  // const tmp = box.ref.current.get\r\n  if (box.ref.current) {\r\n    let { x, y } = box.ref.current.getBoundingClientRect();\r\n    box.clientX = x;\r\n    box.clientY = y;\r\n  }\r\n  // console.log(\"box render\");\r\n  if (box.name == null) box.name = box.id;\r\n\r\n  return (\r\n    <Draggable\r\n      bounds=\"#boxesContainer\"\r\n      onStart={(e) => e.stopPropagation()}\r\n      onDrag={(e, data) => {\r\n        handleDrag(e, data, box.id);\r\n      }}\r\n      onStop={(e, data) => handleDrag(e, data, box.id)}\r\n      position={{ x: box.x, y: box.y }}\r\n      grid={[constants.draggingGrid[0], constants.draggingGrid[1]]}\r\n    >\r\n      <div\r\n        ref={box.ref}\r\n        className={`${box.shape} hoverMarker absolute`}\r\n        style={{ background }}\r\n        onClick={(e) => {\r\n          if (wasDragged === false) c.handleBoxClick(e, box);\r\n          setWasDragged(false);\r\n        }}\r\n        id={box.id}\r\n        onDragOver={(e) => {\r\n          // console.log(\"box onDragOver!\");\r\n\r\n          e.stopPropagation();\r\n          e.preventDefault();\r\n        }}\r\n        onDrop={(e) => {\r\n          console.log(\"box on drop!\");\r\n          if (e.dataTransfer.getData(\"arrow\") !== box.id) {\r\n            c.addLine({ startBoxId: e.dataTransfer.getData(\"arrow\"), endBoxId: box.id });\r\n          }\r\n        }}\r\n        // onDragEnter={(e) => {\r\n        //   console.log(\"box onDragEnter!\");\r\n        //   if (e.dataTransfer.getData(\"arrow\") !== box.id) {\r\n        //     c.addLine({ startBoxId: e.dataTransfer.getData(\"arrow\"), endBoxId: box.id });\r\n        //   }\r\n        // }}\r\n      >\r\n        <div>{box.name}</div>\r\n        {/* <ConnectPointsWrapper element={box} setWasDragged={setWasDragged} /> */}\r\n        <ConnectPointsWrapper element={box} elemPos={{ x: box.clientX, y: box.clientY }} />\r\n      </div>\r\n    </Draggable>\r\n  );\r\n};\r\n\r\nexport default React.memo(Box);\r\n","import React from \"react\";\nimport { lineType } from \"./../SwitchView\";\nimport TopBar from \"./TopBar\";\nimport Box, { BoxType } from \"./Box\";\n\nconst BoxesContainer = ({\n  handleDropBox,\n  boxes,\n  lines,\n}: {\n  handleDropBox: (e: any) => void;\n  boxes: BoxType[];\n  lines: lineType[];\n}) => {\n  return (\n    <div\n      id=\"boxesContainer\"\n      className=\"boxesContainer\"\n      onDragOver={(e) => {\n        // let tmp = e.dataTransfer.getData(\"shape\");\n        // console.log(\"boxContainer onDragOver\");\n        e.stopPropagation();\n        e.preventDefault();\n      }}\n      onDrop={handleDropBox}\n    >\n      <TopBar />\n\n      {boxes.map((box) => (box.visible ? <Box key={box.id} {...({ box, boxes } as const)} /> : null))}\n    </div>\n  );\n};\n\nexport default BoxesContainer;\n","////@ts-nocheck\n\n/**\n * The propose of all these requests is to serve the UI and return parsed data as the UI expect.\n */\n\n// import { ofctlRestUrl } from \"./../App\";\nimport { fieldsNameType } from \"../pages/SwitchView/components/aclsFields\";\nimport { isEqual, isMatch } from \"lodash\";\n\nexport type portDetailsType = {\n  advertised: number;\n  config: number;\n  curr: number;\n  curr_speed: number;\n  hw_addr: string;\n  max_speed: number;\n  name: string;\n  peer: number;\n  port_no: string;\n  state: number;\n  supported: number;\n};\n\nexport type serverSwitchType = {\n  ports: portDetailsType[];\n  name: string;\n  dpid: number;\n};\n\nexport type serverSwitchesType = {\n  [dpid: string]: serverSwitchType;\n};\n\ntype flowActionsType<T extends \"serverGet\" | \"serverPost\" | \"UI\" = \"UI\"> = T extends \"serverGet\"\n  ? string[]\n  : T extends \"serverPost\"\n  ? { type: fieldsNameType<\"actions\">; port: number }[]\n  : { [key in fieldsNameType<\"actions\">]: string };\n\nexport type flowType<T extends \"serverGet\" | \"serverPost\" | \"UI\" = \"UI\"> = {\n  match: { [key in fieldsNameType<\"match\">]?: string };\n  actions: flowActionsType<T>;\n  byte_count?: number;\n  cookie?: number;\n  duration_nsec?: number;\n  duration_sec?: number;\n  flags?: number;\n  hard_timeout?: number;\n  idle_timeout?: number;\n  length?: number;\n  packet_count?: number;\n  priority: number;\n  table_id?: number;\n};\n\nconst getListOfSwitchesDpids = ({\n  url,\n  onSuccess,\n  onError,\n}: {\n  url: string;\n  onSuccess: (switchesDpids: string[]) => any;\n  onError?: (error: Error) => any;\n}) => {\n  return fetch(url + \"/stats/switches\")\n    .then((res) => {\n      if (res.ok === false) return onError({ message: res.statusText, name: \"URIError\" });\n      return res.json();\n    })\n    .then(\n      (switchesDpids: string[]) => {\n        onSuccess(switchesDpids);\n      },\n      (error) => {\n        if (onError) onError(error);\n      }\n    );\n};\n\nconst getPortDescription = ({\n  url,\n  dpid,\n  onSuccess,\n  onError,\n}: {\n  url: string;\n  dpid: number;\n  onSuccess: (switchPorts: { [dpid: number]: portDetailsType[] }) => any;\n  onError?: (error: Error) => any;\n}) => {\n  return fetch(url + \"/stats/portdesc/\" + dpid)\n    .then((res) => res.json())\n    .then(\n      (switchPorts: { [dpid: number]: portDetailsType[] }) => {\n        onSuccess(switchPorts);\n      },\n      (error) => {\n        if (onError) onError(error);\n      }\n    );\n};\n\nexport const getSwitchWithPortDescription = ({\n  url,\n  dpid,\n  onSuccess,\n  onError,\n}: {\n  url: string;\n  dpid: number;\n  onSuccess: (switche: serverSwitchType) => any;\n  onError?: (error: Error) => any;\n}) => {\n  return getPortDescription({\n    url,\n    dpid: Number(dpid),\n    onSuccess: (switchPorts) => {\n      const ports = switchPorts[dpid];\n      let parsed_switch = { ports, dpid };\n      for (let i = 0; i < ports.length; i++) {\n        if (ports[i].port_no === \"LOCAL\") {\n          //set name of switch to name of local port\n          parsed_switch = Object.assign(parsed_switch, { name: ports[i].name });\n        }\n      }\n      onSuccess(parsed_switch as serverSwitchType);\n    },\n    onError: (error) => {\n      if (onError) onError(error);\n    },\n  });\n};\n\nexport const getAllSwitchesWithPortDescription = ({\n  url,\n  onSuccess,\n  onError,\n}: {\n  url: string;\n  onSuccess: (switches: serverSwitchesType) => any;\n  onError?: (error: Error) => any;\n}) => {\n  let switches: { [dpid: string]: serverSwitchType } = {};\n  return getListOfSwitchesDpids({\n    url,\n    onSuccess: (switchesDpids) => {\n      const promises = switchesDpids.map((dpid) =>\n        getSwitchWithPortDescription({\n          url,\n          dpid: Number(dpid),\n          onSuccess: (switche) => {\n            switches = Object.assign(switches, { [dpid]: switche });\n          },\n          onError: (error) => onError(error),\n        })\n      );\n      Promise.all(promises).then(() => {\n        // let parsed_switches: serverSwitchesType = {};\n        // for (let dpid in switches) {\n        //   // for each switch\n        //   for (let i = 0; i < switches[dpid].length; i++) {\n        //     if (switches[dpid][i].port_no === \"LOCAL\") {\n        //       //set name of switch to name of local port\n        //       parsed_switches[dpid] = Object.assign(\n        //         { ports: switches[dpid] },\n        //         { name: switches[dpid][i].name, dpid: Number(dpid) }\n        //       );\n        //     }\n        //   }\n        // }\n        onSuccess(switches);\n      });\n    },\n    onError: (error) => {\n      if (onError) onError(error);\n    },\n  });\n};\n\nexport const convertActionsFromServerGet2UI = (actions: flowType<\"serverGet\">[\"actions\"]): flowType<\"UI\">[\"actions\"] => {\n  //   const actionsList = actions.map((ac) => ac.split(\":\")) as string[][];\n  //   const actionsObjects = actionsList.map((ac) => ({ [ac[0]]: ac[1] })) as flowType<\"UI\">[\"actions\"];\n  //   console.log(actionsObjects);\n  //   return actionsObjects;\n\n  const actionsUI = actions\n    .map((ac) => ac.split(\":\"))\n    .reduce((acu, cu) => Object.assign(acu, { [cu[0]]: cu[1] }), {} as flowType<\"UI\">[\"actions\"]);\n  return actionsUI;\n\n  // return (Object.keys(actions) as Array<keyof typeof actions>).map((ac) => ({\n  //   type: ac,\n  //   port: Number(actions[ac]) ? Number(actions[ac]) : actions[ac],\n  // }));\n\n  // console.log(actions.map((ac) => ac.split(\":\")));\n};\n\nexport const convertActionsFromUI2ServerPost = (\n  actions: Partial<flowType[\"actions\"]>\n): Partial<flowType<\"serverPost\">[\"actions\"]> => {\n  // const result = actions.map(\n  //   (action) =>\n  //     (Object.keys(action) as Array<keyof typeof action>).reduce(\n  //       (acu, cu) => Object.assign(acu, { [cu]: action[cu] }),\n  //       {}\n  //     ) as serverSetFlowType[\"actions\"][number]\n  // );\n  // console.log(result);\n\n  // const result = actions.map((action) =>\n  //   (Object.keys(action) as Array<keyof typeof action>).map((acKey) => ({\n  //     type: acKey,\n  //     port: Number(action[acKey]) ? Number(action[acKey]) : action[acKey],\n  //   }))\n  // );\n\n  const result = (Object.keys(actions) as Array<keyof typeof actions>).map((ac) => ({\n    type: ac,\n    port: Number(actions[ac]) ? Number(actions[ac]) : actions[ac],\n  }));\n\n  // (Object.keys(actions) as Array<keyof typeof actions>).map((ac)\n  return result as any;\n};\n\n// export const convertActionsFromUI2ServerSet = (actions: flowType[\"actions\"]): flowType<\"serverPost\">[\"actions\"] =>{\n\n// }\n\nconst convertNumericStringsInObj2numbers = (obj: { [key: string]: any }): { [key: string]: any } => {\n  const newObj = { ...obj };\n  for (let key in obj) {\n    if (typeof obj[key] === \"string\") newObj[key] = isNaN(obj[key]) === false ? Number(obj[key]) : obj[key];\n  }\n  return newObj;\n};\n\nconst convertNumbersInObj2strings = (obj: { [key: string]: any }): { [key: string]: any } => {\n  const newObj = { ...obj };\n  for (let key in obj) {\n    if (typeof obj[key] === \"number\") newObj[key] = String(obj[key]);\n  }\n  return newObj;\n};\n\nconst convertFlowServerGet2UI = (flow: flowType<\"serverGet\">): flowType => ({\n  ...flow,\n  match: convertNumbersInObj2strings(flow.match),\n  actions: convertActionsFromServerGet2UI(flow.actions),\n});\n// const convertFlowServerPost2UI = (flow: flowType<\"serverPost\">): flowType =>  ({\n//     ...flow,\n//     actions: conver(flow.actions),\n//   });;\n\nconst convertFlowUI2serverPost = (flow: Partial<flowType>): Partial<flowType<\"serverPost\">> => ({\n  ...flow,\n  match: convertNumericStringsInObj2numbers(flow.match),\n  actions: convertActionsFromUI2ServerPost(flow.actions),\n});\n\nexport const getFlowsOfSwitch = ({\n  dpid,\n  url,\n  onSuccess,\n  onError,\n}: {\n  dpid: number;\n  url: string;\n  onSuccess: (flows: flowType<\"UI\">[]) => any;\n  onError?: (error: Error) => any;\n}) => {\n  return fetch(url + \"/stats/flow/\" + dpid)\n    .then((res) => {\n      if (res.status !== 200) alert(res.status);\n      return res.json();\n    })\n    .then(\n      (result: { [dpid: string]: flowType<\"serverGet\">[] }) => {\n        onSuccess(result[dpid].map((flow) => convertFlowServerGet2UI(flow)));\n      },\n      (error) => {\n        if (onError) onError(error);\n      }\n    );\n};\n\nexport const removeFlowFromSwitch = ({\n  url,\n  dpid,\n  flow,\n  onSuccess,\n  onError,\n}: {\n  url: string;\n  dpid: number;\n  flow: Partial<flowType<\"UI\">>;\n  onSuccess?: () => any;\n  onError?: (error: string | Error) => any;\n}) => {\n  const parsedActions = convertActionsFromUI2ServerPost(flow.actions);\n  const reqBody = { ...flow, dpid, actions: parsedActions };\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(reqBody),\n  };\n  fetch(url + \"/stats/flowentry/delete_strict\", requestOptions).then(\n    (response) => {\n      if (response.status !== 200) onError(response.statusText);\n      if (onSuccess) onSuccess();\n    },\n    (error) => {\n      if (onError) onError(error);\n    }\n  );\n};\n\n/**\n * filter flow matching based given details.\n * @param flowMatch all flows matching given fields of current flow will be returned.\n */\nexport const getFilteredFlowsFromSwitch = ({\n  url,\n  dpid,\n  flowMatch,\n  onSuccess,\n  onError,\n}: {\n  url: string;\n  dpid: number;\n  flowMatch: Partial<flowType<\"UI\">>;\n  onSuccess: (matchingFlows: flowType[]) => any;\n  onError?: (error: Error) => any;\n}) => {\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify({ match: flowMatch }),\n  };\n  fetch(url + \"/stats/flow/\" + dpid, requestOptions)\n    .then((response) => {\n      if (response.status !== 200) alert(response.status);\n      else return response.json();\n    })\n    .then(\n      (flowDetails: { [dpid: number]: flowType<\"serverGet\">[] }) => {\n        onSuccess(flowDetails[dpid].map((f) => convertFlowServerGet2UI(f)));\n      },\n      (error) => {\n        if (onError) onError(error);\n      }\n    );\n};\n\n/**\n * will return the first flow matching the match rule `matchRule` given from vSwitch with dpid `dpid`\n */\n// export const getFlowBasedOnMatchRuleFromSwitch = ({\n//   dpid,\n//   matchRule,\n//   onSuccess,\n//   onError,\n// }: {\n//   dpid: number;\n//   matchRule: flowType[\"match\"];\n//   onSuccess: (flow: flowType<\"UI\">) => any;\n//   onError?: (error: Error) => any;\n// }) => {\n//   getFilteredFlowsFromSwitch({\n//     dpid,\n//     flowMatch: { match: matchRule },\n//     onSuccess: (flows) => onSuccess(flows[0]), // returns the first item because is supposed to be single flow matching the given match rule\n//     onError: (error) => {\n//       if (onError) onError(error);\n//     },\n//   });\n// };\n\n/**\n * filter flow matching based given details.\n * @param flowMatch all flows matching given fields of current flow will be returned.\n */\nexport const addFlowToSwitch = ({\n  url,\n  dpid,\n  flow,\n  onSuccess,\n  onError,\n}: {\n  url: string;\n  dpid: number;\n  flow: Partial<flowType<\"UI\">>;\n  onSuccess?: (flow: flowType<\"UI\">) => any;\n  onError?: (error: Error) => any;\n}) => {\n  let serverPostFlow = convertFlowUI2serverPost(flow);\n  const { match = {}, actions = [], priority = 1 } = serverPostFlow;\n  serverPostFlow = {\n    ...serverPostFlow,\n    match,\n    actions,\n    priority,\n  };\n  const reqBody = { ...serverPostFlow, dpid: Number(dpid) };\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(reqBody),\n  };\n  fetch(url + \"/stats/flowentry/add\", requestOptions).then(\n    (response) => {\n      if (response.status !== 200) alert(response.status);\n      else {\n        //after flow successfully  added retrieve all details of flow from server because some of the details may be set by the server\n        if (onSuccess) {\n          getFilteredFlowsFromSwitch({\n            url,\n            dpid,\n            flowMatch: { match },\n            onSuccess: (flows) => {\n              const updatedFlow = flows.find((f) => isMatch(f, flow) && isEqual(f.match, flow.match));\n              //   console.log(flows, flow, updatedFlow);\n              onSuccess(updatedFlow);\n            },\n            onError: (error) => onError(error),\n          });\n        }\n        //     getFlowBasedOnMatchRuleFromSwitch({\n        //       dpid,\n        //       matchRule: match,\n        //       onSuccess: (updatedFlow) => {\n        //         console.log(updatedFlow, flow);\n        //         // if (isEqual(updatedFlow.match, flow.match) === false) {\n        //         if (false) {\n        //           // #FIXME bugs of identifying right flow\n        //           removeFlowFromSwitch({ dpid, flow: updatedFlow });\n        //           onError(\n        //             \"match rule conflict.\\n\" +\n        //               \"The match rule: \" +\n        //               JSON.stringify(flow.match) +\n        //               \"\\n\\n also match the match rule:\" +\n        //               JSON.stringify(updatedFlow.match) +\n        //               \"\\n\\nPlease provide more detailed match rule.\"\n        //           );\n        //           return;\n        //         } else {\n        //           onSuccess(updatedFlow);\n        //         }\n        //       },\n        //       onError: (error) => onError(error),\n        //     });\n      }\n    },\n    (error) => onError(error)\n  );\n};\n\nexport const modifyFlowOnSwitch = ({\n  url,\n  dpid,\n\n  updatedFlow,\n  onSuccess,\n  onError,\n}: {\n  url: string;\n  dpid: number;\n  updatedFlow: Partial<flowType<\"UI\">>;\n  onSuccess?: () => any;\n  onError?: (error: Error) => any;\n}) => {\n  const serverFlow = convertFlowUI2serverPost(updatedFlow);\n  console.log(serverFlow);\n  const reqBody = {\n    ...serverFlow,\n    dpid: Number(dpid),\n  };\n  const requestOptions = {\n    method: \"POST\",\n    headers: { \"Content-Type\": \"application/json\" },\n    body: JSON.stringify(reqBody),\n  };\n  fetch(url + \"/stats/flowentry/modify_strict\", requestOptions).then(\n    (response) => {\n      if (response.status !== 200) alert(response.status);\n      else {\n        console.log(response);\n        if (onSuccess) onSuccess();\n      }\n    },\n    (error) => onError(error)\n  );\n};\n","import React from \"react\";\n\nexport default ({ fetchFailed }: { fetchFailed: null | Error }) => {\n  return (\n    <div>\n      <h2> Fetch Request Failed </h2>\n      <h3>\n        {/* {fetchFailed.message + \"(\" + fetchFailed.name + \")\"} */}\n        {fetchFailed.stack}\n        {/* Can't connect to controller, or to ofctl_rest API.\n        <br />\n        (or in development - check proxy server is running) */}\n      </h3>\n    </div>\n  );\n};\n","import React from \"react\";\nimport BounceLoader from \"react-spinners/BounceLoader\";\n\nexport default () => {\n  return (\n    <div>\n      <h3>Loading...</h3>\n      <BounceLoader size={150} color={\"#123abc\"} loading={true} />\n    </div>\n  );\n};\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Fade } from \"@material-ui/core\";\nimport ServerError from \"./ServerError\";\nimport Loading from \"./Loading\";\n\nconst useStyles = makeStyles(() => ({\n  mainWindow: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"var(--canvasWidthVw)\",\n    minHeight: \"var(--canvasHeightVh)\",\n    background: \"white\",\n    color: \"black\",\n    borderRadius: \"100px\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    padding: \"50px\",\n    margin: \"30px 0\",\n  },\n  innerContent: {\n    width: \"100%\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    flexWrap: \"wrap\",\n  },\n}));\n\nexport default ({\n  children,\n  fetchFailed,\n  isLoading,\n}: {\n  children?: React.ReactNode;\n  fetchFailed?: null | Error;\n  isLoading?: boolean;\n}) => {\n  const classes = useStyles();\n\n  let comp = children;\n  if (fetchFailed) comp = <ServerError {...{ fetchFailed }} />;\n  else if (isLoading && isLoading === true) comp = <Loading />;\n\n  return (\n    <div className={classes.mainWindow}>\n      <Fade in={true} timeout={600} mountOnEnter unmountOnExit>\n        <div className={classes.innerContent}>{comp}</div>\n      </Fade>\n      <div style={{ marginTop: 30 }}></div>\n    </div>\n  );\n};\n","import React, { useState, createContext, useEffect, useCallback, useMemo } from \"react\";\nimport InfoOutlinedIcon from \"@material-ui/icons/InfoOutlined\";\nimport \"./SwitchView.css\";\nimport { BoxType } from \"./components/Box\";\nimport { actionsTypes } from \"./components/TopBar\";\nimport XarrowWrapper, { XarrowWrapperType } from \"./components/XarrowWrapper\";\nimport FlowDetailsModal from \"./modals/FlowDetailsModal/FlowDetailsModal\";\nimport { useParams } from \"react-router\";\nimport PortsBar from \"./components/PortsBar\";\nimport TestComponent from \"./components/TestComponent\";\nimport BounceLoader from \"react-spinners/BounceLoader\";\nimport SwitchDetailsModal from \"./modals/SwitchDetailsModal/SwitchDetailsModal\";\nimport _, { isEqual, flow } from \"lodash\";\nimport { PortType } from \"./components/Port\";\nimport { xarrowPropsType } from \"react-xarrows\";\nimport ToolboxMenu from \"./components/ToolboxMenu\";\nimport BoxesContainer from \"./components/BoxesContainer\";\nimport {\n  portDetailsType,\n  flowType,\n  serverSwitchesType,\n  getFlowsOfSwitch,\n  removeFlowFromSwitch,\n  addFlowToSwitch,\n  modifyFlowOnSwitch,\n  convertActionsFromUI2ServerPost,\n  getSwitchWithPortDescription,\n  serverSwitchType,\n} from \"../../utils/serverRequests\";\nimport MainWindow from \"../../components/MainWindow\";\n\n// import { matchFieldsType, actionsFieldsType } from \"./components/aclsFields\";\n\n// import MaterialIcon from \"material-icons-react\";\n\n// const shapes = [\"wideBox\", \"tallBox\", \"portBox\"];\n\ntype CanvasContextType = {\n  // setBoxes: React.Dispatch<React.SetStateAction<BoxType[]>>;\n  updateBoxOnUi: (updatedBox: BoxType) => void;\n  updateFlowOnUi: (updatedFlow: flowUIType) => void;\n  setLines: React.Dispatch<React.SetStateAction<any[]>>;\n  selected: selectedType<\"box\" | \"arrow\">;\n  setSelected: React.Dispatch<React.SetStateAction<selectedType>>;\n  actionState: actionsTypes;\n  setActionState: React.Dispatch<React.SetStateAction<actionsTypes>>;\n  handleBoxClick: (e: any, box: any) => void;\n  chooseBoxBackground: (box: any) => string;\n  addBox: (x: any, y: any, shape: any) => void;\n  addLine: ({ startBoxId, endBoxId }: { startBoxId: string; endBoxId: string }) => void;\n  removeSelectedBox: () => void;\n  addLineToSelectedBox: (box: any) => void;\n  removeSelectedLine: () => void;\n  openModsWindowOfSelected: () => void;\n  handleSelect: (e: any, box?: any) => void;\n  toggleFlowVisibility: (flow: any) => void;\n  toggleFlowVisibilityOfSelected: () => void;\n  delFlow: (flow: flowUIType, callback?: () => void) => void;\n  addFlowToServer: ({\n    flow,\n    callback,\n    checkExistence,\n  }: {\n    flow: flowUIType;\n    callback?: (updatedFlowDetails: flowType) => void;\n    checkExistence?: boolean;\n  }) => void;\n  updateFlowOnServer: (prevID: string, updatedFlow: flowUIType, callback?: () => void) => void;\n  updateFlowName: (flowId: string, newName: string) => void;\n};\n\nexport const CanvasContext = createContext<CanvasContextType>(null);\nexport const constants = { draggingGrid: [1, 1] };\n\nexport const boxShapes = [\"modBox\"] as const;\n\nexport type boxShapesType = typeof boxShapes[number];\nexport type selectedType<t extends \"box\" | \"arrow\" = \"box\" | \"arrow\"> = t extends \"box\" ? BoxType | PortType : XarrowWrapperType;\n\nexport type flowUIType = {\n  details: Partial<flowType<\"UI\">>;\n  // visible: boolean;\n  box: BoxType;\n  isSynced: boolean;\n};\n\nexport type switchSelfType = serverSwitchType & {\n  flowEntries: flowUIType[];\n};\n\nexport type modXarrowPropsType = Omit<xarrowPropsType, \"start\" | \"end\"> & {\n  start: string;\n  end: string;\n};\n\nexport type lineType = modXarrowPropsType;\n\nconst SwitchView = ({ ofctlRestUrl }: { ofctlRestUrl: string }) => {\n  const { dpid: sDpid } = useParams<{ dpid: string }>();\n  const dpid = Number(sDpid);\n  const [switchSelf, setSwitchSelf] = useState<switchSelfType>({\n    // ...switches[dpid],\n    flowEntries: [],\n    ports: [],\n    name: \"\",\n    dpid,\n  });\n  const [ports, setPorts] = useState<PortType[]>(\n    // switchSelf.ports.map((p) => ({\n    //   shape: \"portBox\" as const,\n    //   id: p.port_no,\n    //   name: p.name,\n    //   port: p,\n    //   ref: null,\n    // }))\n    []\n  );\n  // console.log(\"switchSelf\", switchSelf);\n\n  const [switchDetailsWindow, setSwitchDetailsWindow] = useState(false);\n\n  const [isLoading, setIsLoading] = useState(true);\n  const [fetchFailed, setFetchFailed] = useState<null | Error>(null);\n  useEffect(() => {\n    fetchSwitchFromServer(ofctlRestUrl).then(() => {\n      setIsLoading(false);\n      fetchFlowsFromServer(ofctlRestUrl);\n    });\n  }, []);\n\n  const fetchSwitchFromServer = (url: string) => {\n    return getSwitchWithPortDescription({\n      dpid,\n      url,\n      onSuccess: (switche) => {\n        setSwitchSelf(Object.assign(switchSelf, switche));\n        setPorts(initPorts(switche.ports));\n      },\n      onError: (error) => setFetchFailed(error),\n    });\n  };\n\n  const fetchFlowsFromServer = (url: string) => {\n    return getFlowsOfSwitch({\n      dpid,\n      url,\n      onSuccess: (flows) => {\n        const boxesConSize = document.getElementById(\"boxesContainer\").getBoundingClientRect();\n\n        setSwitchSelf((switchSelf) => {\n          const newSwitchSelf = { ...switchSelf };\n          newSwitchSelf.flowEntries = initFlows(flows);\n          return newSwitchSelf;\n        });\n      },\n    });\n  };\n\n  const initPorts = (portsDetails: portDetailsType[]): PortType[] => {\n    return portsDetails.map((p) => ({\n      shape: \"portBox\" as const,\n      id: p.port_no,\n      name: p.name,\n      port: p,\n      ref: null,\n    }));\n  };\n\n  const initFlows = (flowsDetails: flowType[]): flowUIType[] => {\n    const boxesConSize = document.getElementById(\"boxesContainer\").getBoundingClientRect();\n    return flowsDetails.map((f, i) => {\n      let x = boxesConSize.width * (0.2 + 0.8 * Math.random());\n      let y = boxesConSize.height * (0.2 + 0.8 * Math.random());\n      return {\n        details: f,\n        visible: false,\n        isSynced: true,\n        box: {\n          x,\n          y,\n          visible: false,\n          id: JSON.stringify(f.match),\n          name: \"flow\" + i,\n        },\n      };\n    });\n  };\n\n  const toggleFlowVisibility = useCallback(\n    (flow: flowUIType) => {\n      flow.box.visible = !flow.box.visible;\n      updateFlowOnUi(flow);\n    },\n    [switchSelf]\n  );\n\n  const toggleFlowVisibilityOfSelected = () => {\n    toggleFlowVisibility(switchSelf.flowEntries.find((f) => f.box.id === selected.id));\n  };\n\n  const [lines, setLines] = useState<lineType[]>([\n    // {\n    //   props: {\n    //     start: \"box1\",\n    //     end: \"box2\",\n    //     // endAnchor: \"middle\",\n    //     strokeWidth: 10,\n    //     label: {\n    //       middle: { text: \"clickMe!\", extra: { alignmentBaseline: \"text-after-edge\" } },\n    //     },\n    //   },\n    // },\n  ]);\n\n  const [selected, setSelected] = useState<selectedType>(null);\n  const [actionState, setActionState] = useState<actionsTypes>(\"Normal\");\n\n  const handleSelect = useCallback(\n    (e, box?) => {\n      if (e === null) {\n        setSelected(null);\n        setActionState(\"Normal\");\n      } else {\n        setSelected(box);\n      }\n    },\n    // [selected, actionState]\n    []\n  );\n\n  // const getBoxes = () => Object.values(switchSelf.flowEntries).map((f) => f.box);\n  const getBoxes = (mySwitchSelf: switchSelfType = null) => {\n    if (mySwitchSelf) return Object.values(mySwitchSelf.flowEntries).map((f) => f.box);\n    else return Object.values(switchSelf.flowEntries).map((f) => f.box);\n  };\n\n  // const setBoxes = () => {\n  //   return Object.keys(switchSelf.flowEntries).map(flow=>)\n  // }\n\n  const updateBoxOnUi = (updatedBox: BoxType) => {\n    setSwitchSelf((switchSelf) => {\n      const newSwitchSelf = { ...switchSelf };\n      let newFlow = newSwitchSelf.flowEntries.find((f) => f.box.id === updatedBox.id);\n      newFlow.box = updatedBox;\n      return newSwitchSelf;\n    });\n  };\n\n  const updateFlowOnUi = (updatedFlow: flowUIType) => {\n    setSwitchSelf((switchSelf) => {\n      const newSwitchSelf = { ...switchSelf };\n      let i = newSwitchSelf.flowEntries.findIndex((f) => f.box.id === updatedFlow.box.id);\n      newSwitchSelf.flowEntries[i] = { ...updatedFlow };\n      return newSwitchSelf;\n    });\n  };\n\n  const updateFlowName = (id: string, newName: string) => {\n    const newFlow = switchSelf.flowEntries.find((f) => f.box.id === id);\n    newFlow.box.name = newName;\n    updateFlowOnUi(newFlow);\n  };\n\n  const checkExistence = useCallback(\n    (id) => {\n      return [...getBoxes(), ...ports].map((b) => b.id).includes(id);\n    },\n    [switchSelf, ports]\n  );\n\n  const addBox = useCallback(\n    (x, y, shape) => {\n      x -= x % constants.draggingGrid[0];\n      y -= y % constants.draggingGrid[1];\n      let l = getBoxes().length;\n      while (checkExistence(\"box\" + l)) l++;\n      var newName = prompt(\"Enter box name: \", \"box\" + l);\n      while (checkExistence(newName)) newName = prompt(\"name taken,choose other: \");\n      if (newName) {\n        let newFlow: flowUIType = {\n          isSynced: false,\n          details: {},\n          // visible: true,\n          box: {\n            id: newName,\n            x,\n            y,\n            shape,\n            flowDetailsModalOpen: true,\n            visible: true,\n          },\n        };\n        // setBoxes([...boxes, newBox]);\n        setSwitchSelf((switchSelf) => {\n          const newSwitchSelf = { ...switchSelf };\n          newSwitchSelf.flowEntries = newSwitchSelf.flowEntries.concat(newFlow);\n          return newSwitchSelf;\n        });\n      }\n    },\n    [switchSelf.flowEntries.length, JSON.stringify(getBoxes().map((b) => b.flowDetailsModalOpen))]\n  );\n\n  const handleDropBox = useCallback(\n    (e) => {\n      let shape = e.dataTransfer.getData(\"shape\");\n      if (boxShapes.includes(shape)) {\n        let { x, y } = e.target.getBoundingClientRect();\n        x = e.clientX - x;\n        y = e.clientY - y;\n        addBox(x, y, shape);\n      }\n    },\n    [getBoxes().length, JSON.stringify(getBoxes().map((b) => b.flowDetailsModalOpen)), selected, addBox]\n  );\n\n  const handleBoxClick = useCallback(\n    (e, box) => {\n      e.stopPropagation(); //so only the click event on the box will fire on not on the container itself\n      if (actionState === \"Normal\") {\n        handleSelect(e, box);\n      } else if (actionState === \"Add Connections\" && selected.id !== box.id && !box.id.includes(\":<input>\")) {\n        addLineToSelectedBox(box);\n      } else if (actionState === \"Remove Connections\") {\n        setLines((lines) => lines.filter((line) => !(line.start === selected.id && line.end === box.id)));\n      }\n    },\n    [actionState, selected]\n  );\n\n  const chooseBoxBackground = useCallback(\n    (box) => {\n      let background = null;\n      if (selected && selected.id === box.id) {\n        background = \"rgb(200, 200, 200)\";\n      } else if (\n        (actionState === \"Add Connections\" &&\n          lines.filter((line) => line.start === selected.id && line.end === box.id).length === 0 &&\n          !box.id.includes(\":<input>\")) ||\n        (actionState === \"Remove Connections\" &&\n          lines.filter((line) => line.start === selected.id && line.end === box.id).length > 0)\n      ) {\n        background = \"LemonChiffon\";\n      }\n      return background;\n    },\n    [actionState, selected]\n  );\n\n  const addLine = useCallback(\n    ({ startBoxId, endBoxId }: { startBoxId: string; endBoxId: string }) => {\n      // const flowToUpdate = switchSelf.flowEntries.find((f) => f.box.id === startBoxId);\n      // updateFlowOnServer();\n\n      const inputFlow = switchSelf.flowEntries.find((f) => f.box.id === startBoxId);\n      const outputFlow = switchSelf.flowEntries.find((f) => f.box.id === endBoxId);\n      if (inputFlow) {\n        inputFlow.details.actions[\"OUTPUT\"] = endBoxId.replace(\":<output>\", \"\");\n        updateFlow(inputFlow.box.id, inputFlow);\n        // inputFlow.details.actions.filter(ac=>ac===\"OUTPUT\").forEach\n        // inputFlow.isSynced ? updateFlow(inputFlow) : updateFlowOnUi(inputFlow);\n      }\n      if (outputFlow) {\n        outputFlow.details.match[\"in_port\"] = startBoxId.replace(\":<input>\", \"\");\n        updateFlow(outputFlow.box.id, outputFlow);\n        // outputFlow.isSynced ? updateFlow(outputFlow) : updateFlowOnUi(outputFlow);\n      }\n      // }\n      // add line from selected box to passed 'box'\n      //   setLines((lines) => [\n      //     ...lines,\n      //     {\n      //       start: startBoxId,\n      //       end: endBoxId,\n      //     },\n      //   ]);\n    },\n    [switchSelf, selected]\n  );\n\n  const removeSelectedBox = useCallback(() => {\n    delFlow(switchSelf.flowEntries.find((f) => f.box.id === selected.id));\n  }, [switchSelf, selected]);\n\n  const addLineToSelectedBox = useCallback(\n    (box: BoxType) => {\n      addLine({ startBoxId: (selected as BoxType).id, endBoxId: box.id });\n      // setLines((lines) => [\n      //   ...lines,\n      //   {\n      //     start: selected.id as string,\n      //     end: box.id,\n      //   },\n      // ]);\n    },\n    [lines.length, selected]\n  );\n\n  const removeLine = (lineId: XarrowWrapperType[\"id\"]) => {\n    const inputFlow = switchSelf.flowEntries.find((f) => f.box.id === lineId.start);\n    const outputFlow = switchSelf.flowEntries.find((f) => f.box.id === lineId.end);\n    if (inputFlow) {\n      delete inputFlow.details.actions[\"OUTPUT\"];\n      updateFlow(inputFlow.box.id, { ...inputFlow });\n    }\n    if (outputFlow) {\n      delete outputFlow.details.match[\"in_port\"];\n      updateFlow(outputFlow.box.id, { ...outputFlow });\n    }\n  };\n\n  const removeSelectedLine = useCallback(() => {\n    removeLine((selected as selectedType<\"arrow\">).id);\n  }, [switchSelf, selected]);\n\n  const removeConnectedLines = (boxId: string) => {\n    lines\n      .filter((line) => !(line.start === boxId || line.end === boxId))\n      .forEach((line) => removeLine({ start: line.start, end: line.end }));\n  };\n\n  const openModsWindowOfSelected = useCallback(() => {\n    setSwitchSelf((switchSelf) => {\n      const newSwitchSelf = { ...switchSelf };\n      const newBox = getBoxes().find((box) => box.id === selected.id);\n      newBox.flowDetailsModalOpen = true;\n      return newSwitchSelf;\n    });\n  }, [selected]);\n\n  const delFlowFromUI = (flow: flowUIType) => {\n    removeConnectedLines(flow.box.id);\n    setSwitchSelf((switchSelf) => {\n      const newSw = { ...switchSelf };\n      newSw.flowEntries = newSw.flowEntries.filter((f) => !_.isEqual(f, flow));\n      return newSw;\n    });\n    handleSelect(null);\n  };\n\n  const delFlowFromServer = (flow: flowUIType, callback?: () => void) => {\n    removeFlowFromSwitch({\n      url: ofctlRestUrl,\n      flow: flow.details,\n      dpid,\n      onSuccess: () => callback(),\n    });\n  };\n\n  const delFlow = useCallback(\n    (flow: flowUIType) => {\n      const confirm = window.confirm(`are you sure you want to delete ${flow.box.name}?`);\n      if (confirm === false) return;\n      if (flow.isSynced === false) return delFlowFromUI(flow);\n      delFlowFromServer(flow, () => delFlowFromUI(flow));\n    },\n    [switchSelf]\n  );\n\n  const checkFlowExistence = (flowMatch: flowType[\"match\"]) =>\n    switchSelf.flowEntries.find((f) => JSON.stringify(f.details.match) === JSON.stringify(flowMatch));\n\n  // const getFlowDetailsFromServer = (\n  //   matchRule: Partial<flowType[\"match\"]>,\n  //   callback?: (flowsDetails: flowType) => void\n  // ) => {\n  //   getFlowBasedOnMatchRuleFromSwitch({\n  //     dpid,\n  //     matchRule,\n  //     onSuccess: (flow) => {\n  //       callback(flow);\n  //     },\n  //   });\n  // };\n\n  const addFlowToServer = useCallback(\n    ({\n      flow,\n      callback,\n      checkExistence = true,\n    }: {\n      flow: flowUIType;\n      callback?: (updatedFlowDetails: flowType) => void;\n      checkExistence?: boolean;\n    }) => {\n      const { match = {} } = flow.details;\n      if (checkExistence) {\n        const flowExist = checkFlowExistence(match);\n        if (flowExist) {\n          alert(\n            \"the flow \" +\n              flowExist.box.name +\n              \" with the same match rule already exist.\\nFlows with same match rules are not allowed.\"\n          );\n          return;\n        }\n      }\n      addFlowToSwitch({\n        url: ofctlRestUrl,\n        dpid,\n        flow: flow.details,\n        onSuccess: (flowDetails) => {\n          const updatedFlow = {\n            ...flow,\n            details: flowDetails,\n            isSynced: true,\n          };\n          updateFlowOnUi(updatedFlow);\n          if (callback) callback(updatedFlow.details);\n        },\n        onError: (error) => alert(error),\n      });\n    },\n    [switchSelf]\n  );\n\n  // const updateFlow = (updatedFlow: flowUIType) => {\n  //   updateFlowOnServer(updatedFlow, () => updateFlowOnUi(updatedFlow));\n  // };\n\n  /**\n   * will update a flow entry on vSwitch based on matching wildcards.\n   * if successful response will update the UI as well.\n   * @param boxID - id of current flow(means previous match rule)\n   * @param updatedFlow - the updated flow\n   * @param callback    - callback function that will be called after receive success code(200) from server\n   *\n   * @see https://ryu.readthedocs.io/en/latest/app/ofctl_rest.html#modify-flow-entry-strictly\n   */\n  const updateFlow = (boxID: string, updatedFlow: flowUIType, callback?: () => void) => {\n    const flowToDelete = switchSelf.flowEntries.find((f) => f.box.id === boxID);\n    if (isEqual(flowToDelete.details, updatedFlow.details)) return;\n    delFlowFromServer(flowToDelete, () => addFlowToServer({ flow: updatedFlow, callback, checkExistence: false }));\n\n    // const relevantFlow = switchSelf.flowEntries.find((f) => f.box.id === updatedFlow.box.id);\n    // console.log(relevantFlow.details);\n    // modifyFlowOnSwitch({\n    //   dpid,\n    //   updatedFlow: relevantFlow.details,\n    //   onSuccess: () => callback(),\n    //   onError: (error) => alert(error),\n    // });\n\n    // const parsedActions = convertActionsFromUI2ServerPost(updatedFlow.details.actions);\n    // const reqBody = {\n    //   ...updatedFlow.details,\n    //   actions: parsedActions,\n    //   dpid: Number(switchSelf.dpid),\n    // };\n    // const requestOptions = {\n    //   method: \"POST\",\n    //   headers: { \"Content-Type\": \"application/json\" },\n    //   body: JSON.stringify(reqBody),\n    // };\n    // fetch(proxyAddress + \"http://localhost:8080/stats/flowentry/modify_strict\", requestOptions).then((response) => {\n    //   if (response.status !== 200) alert(response.status);\n    //   else {\n    //     if (callback) callback();\n    //   }\n    // });\n  };\n\n  const canvasProps = useMemo(\n    () => ({\n      // setBoxes,\n      updateBoxOnUi,\n      setLines,\n      selected,\n      setSelected,\n      actionState,\n      setActionState,\n      handleBoxClick,\n      chooseBoxBackground,\n      addBox,\n      addLine,\n      removeSelectedBox,\n      addLineToSelectedBox,\n      removeSelectedLine,\n      openModsWindowOfSelected,\n      handleSelect,\n      toggleFlowVisibility,\n      toggleFlowVisibilityOfSelected,\n      delFlow,\n      addFlowToServer,\n      updateFlowOnUi,\n      updateFlowOnServer: updateFlow,\n      updateFlowName,\n    }),\n    [\n      // setBoxes,\n      updateBoxOnUi,\n      setLines,\n      selected,\n      setSelected,\n      actionState,\n      setActionState,\n      handleBoxClick,\n      chooseBoxBackground,\n      addBox,\n      addLine,\n      removeSelectedBox,\n      addLineToSelectedBox,\n      removeSelectedLine,\n      openModsWindowOfSelected,\n      handleSelect,\n      toggleFlowVisibility,\n      toggleFlowVisibilityOfSelected,\n      delFlow,\n      updateFlowOnUi,\n      addFlowToServer,\n      updateFlow,\n      updateFlowName,\n    ]\n  );\n\n  // console.log(\"SwitchView rendered\", switchSelf.flowEntries);\n\n  // const drawFlowLines = (f) =>{\n\n  // }\n\n  if (isLoading === true || fetchFailed) return <MainWindow {...{ isLoading, fetchFailed }} />;\n\n  return (\n    <div>\n      <div className=\"canvasStyle\" id=\"canvas\" onClick={() => handleSelect(null)}>\n        {/* {isLoading ? ( */}\n        <CanvasContext.Provider value={canvasProps}>\n          <TestComponent {...{ canvasProps }} />\n\n          <div className=\"switchTopBar\">\n            <div className=\"switchTitle\">{switchSelf.name}</div>\n            <InfoOutlinedIcon\n              fontSize={\"large\"}\n              // color=\"black\"\n              className=\"infoButton\"\n              onClick={() => setSwitchDetailsWindow(!switchDetailsWindow)}\n            />\n          </div>\n          <div className=\"innerCanvas\">\n            <ToolboxMenu />\n            <PortsBar {...{ ports, portPolarity: \"input\", lines }} />\n            <BoxesContainer {...{ boxes: getBoxes(), handleDropBox, lines }} />\n            <PortsBar {...{ ports, portPolarity: \"output\" }} />\n            {/* xarrow connections*/}\n\n            {/* {lines.map((line, i) => (\n                <XarrowWrapper key={line.start + \"-\" + line.end + i} {...{ line, selected }} />\n              ))} */}\n            {/* draw connections */}\n            {switchSelf.flowEntries.map((f) =>\n              f.box.visible ? (\n                <React.Fragment key={f.box.id}>\n                  {f.details.match && f.details.match.in_port ? (\n                    <XarrowWrapper\n                      line={{\n                        start: f.details.match.in_port + \":<input>\",\n                        end: f.box.id,\n                      }}\n                    />\n                  ) : null}\n                  {f.details.actions &&\n                  (isNaN(f.details.actions.OUTPUT as any) === false || f.details.actions.OUTPUT === \"LOCAL\") ? (\n                    <XarrowWrapper\n                      line={{\n                        start: f.box.id,\n                        end: f.details.actions.OUTPUT + \":<output>\",\n                      }}\n                    />\n                  ) : null}\n                </React.Fragment>\n              ) : null\n            )}\n            {/* boxes menu that may be opened */}\n            {switchSelf.flowEntries.map((f) => {\n              return f.box.flowDetailsModalOpen ? <FlowDetailsModal key={f.box.id} {...{ flow: f }} /> : null;\n            })}\n          </div>\n          {switchDetailsWindow ? (\n            <SwitchDetailsModal\n              {...{\n                setSwitchDetailsWindow,\n                flowEntries: switchSelf.flowEntries,\n              }}\n            />\n          ) : null}\n        </CanvasContext.Provider>\n      </div>\n    </div>\n  );\n};\nexport default SwitchView;\n","import React, { useEffect, useState } from \"react\";\nimport \"./SwitchesPage.css\";\nimport { Link } from \"react-router-dom\";\nimport { serverSwitchesType, getAllSwitchesWithPortDescription } from \"../../utils/serverRequests\";\nimport MainWindow from \"../../components/MainWindow\";\n\nconst SwitchesPage = ({ url }: { url: string }) => {\n  const [switches, setSwitches] = useState<serverSwitchesType>({});\n\n  const [fetchFailed, setFetchFailed] = useState<null | Error>(null);\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    getAllSwitchesWithPortDescription({\n      url,\n      onSuccess: (switches) => {\n        setSwitches(switches);\n        setIsLoading(false);\n      },\n      onError: (error: Error) => {\n        // console.log(error.message);\n        setFetchFailed(error);\n        throw error;\n      },\n    });\n  }, []);\n\n  return (\n    <MainWindow {...{ fetchFailed, isLoading }}>\n      <div className=\"switchListTitle\">{Object.keys(switches).length > 0 ? \"Detected vSwitches:\" : \"No Detected vSwitches.\"}</div>\n      {Object.keys(switches).map((dpid) => {\n        let { ports, name } = switches[dpid];\n        return (\n          <Link to={\"/switch/\" + dpid} key={dpid} className=\"switchList\">\n            {`${name} (dpid=${dpid} ports=${ports.map((p) => p.name).toString()})`}\n          </Link>\n        );\n      })}\n    </MainWindow>\n  );\n};\n\nexport default SwitchesPage;\n","import React, { useEffect } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Button } from \"@material-ui/core\";\nimport { useState } from \"react\";\nimport MainWindow from \"../components/MainWindow\";\nimport { serverSwitchesType, getAllSwitchesWithPortDescription } from \"../utils/serverRequests\";\nimport ServerError from \"../components/ServerError\";\nimport Loading from \"../components/Loading\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    \"& .MuiTextField-root\": {\n      margin: theme.spacing(2),\n      width: \"40ch\",\n    },\n    direction: \"ltr\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n  },\n  loginButton: { margin: theme.spacing(2) },\n  linkDiv: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"center\",\n    marginTop: 50,\n  },\n  link: {\n    \"&:hover\": {\n      color: \"#f00\",\n    },\n  },\n}));\n\nexport default ({\n  ofctlRestUrl,\n  setOfctlRestUrl,\n  // setDataFetched,\n  // setConnectFailed,\n  setSwitches,\n}: {\n  ofctlRestUrl: string;\n  setOfctlRestUrl: React.Dispatch<React.SetStateAction<string>>;\n  // setDataFetched: React.Dispatch<React.SetStateAction<boolean>>;\n  // setConnectFailed: React.Dispatch<React.SetStateAction<boolean>>;\n  setSwitches: React.Dispatch<React.SetStateAction<serverSwitchesType>>;\n}) => {\n  const history = useHistory();\n  const classes = useStyles();\n\n  // useEffect(() => {\n  //   getAllSwitchesWithPortDescription({\n  //     url: ofctlRestUrl,\n  //     onSuccess: (switches) => {\n  //       setSwitches(switches);\n  //       setDataFetched(true);\n  //     },\n  //     onError: (error: any) => {\n  //       setConnectFailed(true);\n  //       throw error;\n  //     },\n  //   });\n  // }, []);\n\n  // const getSwitches = ({url,})\n\n  const [url, setUrl] = useState(ofctlRestUrl);\n\n  const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    setOfctlRestUrl(url);\n    history.push(\"/switches\");\n  };\n\n  // if (connectFailed === true) return <ServerError />;\n  // if (dataFetched === false) return <Loading />;\n\n  return (\n    <MainWindow>\n      <p>Please Provide controller REST API URL:</p>\n      <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={handleSubmit}>\n        <TextField label=\"controller REST API URL\" variant=\"outlined\" value={url} onChange={(e) => setUrl(e.target.value)} />\n        <Button className={classes.loginButton} variant=\"outlined\" type=\"submit\" color=\"primary\">\n          Connect\n        </Button>\n      </form>\n      <div className={classes.linkDiv}></div>\n    </MainWindow>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./App.css\";\r\nimport SwitchView from \"./pages/SwitchView/SwitchView\";\r\nimport SwitchesPage from \"./pages/SwitchesPage/SwitchesPage\";\r\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\r\nimport Loading from \"./components/Loading\";\r\nimport { Container } from \"@material-ui/core\";\r\nimport { getAllSwitchesWithPortDescription, serverSwitchesType } from \"./utils/serverRequests\";\r\nimport ServerError from \"./components/ServerError\";\r\nimport MainWindow from \"./components/MainWindow\";\r\nimport LoginPage from \"./pages/LoginPage\";\r\n\r\nconst proxyAddress = \"http://localhost:9089\";\r\nconst defaultOfctlRestUrl = proxyAddress + \"/\" + \"http://localhost:8080\";\r\n\r\nconst App = () => {\r\n  const [switches, setSwitches] = useState<serverSwitchesType>({});\r\n  const [ofctlRestUrl, setOfctlRestUrl] = useState(defaultOfctlRestUrl);\r\n\r\n  // const [dataFetched, setDataFetched] = useState(false);\r\n  // const [connectFailed, setConnectFailed] = useState(false);\r\n\r\n  // const fetchSwitches = (url: string) => {\r\n  //   getAllSwitchesWithPortDescription({\r\n  //     url,\r\n  //     onSuccess: (switches) => {\r\n  //       setSwitches(switches);\r\n  //       setDataFetched(true);\r\n  //     },\r\n  //     onError: (error: any) => {\r\n  //       setConnectFailed(true);\r\n  //       throw error;\r\n  //     },\r\n  //   });\r\n  // };\r\n\r\n  // useEffect(() => {\r\n  //   fetchSwitches(ofctlRestUrl);\r\n  // }, []);\r\n\r\n  // if (connectFailed === true) return <ServerError />;\r\n  // if (dataFetched === false) return <Loading />;\r\n\r\n  return (\r\n    <Container maxWidth=\"lg\">\r\n      <header className=\"mainTitle\">SDN Manager</header>\r\n      <hr />\r\n      <Router>\r\n        <Switch>\r\n          <Route path=\"/switches\">\r\n            <SwitchesPage url={ofctlRestUrl} />\r\n          </Route>\r\n          <Route path=\"/switch/:dpid\">\r\n            <SwitchView {...{ switches, ofctlRestUrl }} />\r\n          </Route>\r\n          <Route exact path=\"/\">\r\n            <LoginPage {...{ ofctlRestUrl, setOfctlRestUrl, setSwitches }} />\r\n          </Route>\r\n          <Route path=\"*\">\r\n            <MainWindow>\r\n              <h3>404 Not Found</h3>\r\n            </MainWindow>\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import * as React from \"react\";\nimport { render } from \"react-dom\";\nimport \"./index.css\";\n\nimport App from \"./App\";\nconst rootElement = document.getElementById(\"root\");\nrender(<App />, rootElement);\n"],"sourceRoot":""}